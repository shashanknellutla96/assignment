{
	"posts":[
		{
			"id":"613c9d70a3e4b056473cd1a3",
			"uuid":"5f24617b-891c-476e-906b-86bbde057cc5",
			"title":"Different Product Deployment Strategies in DevOps",
			"slug":"different-product-deployment-strategies-in-devops",
			"html":"<p>Before we deep dive into the different deployment strategies that you should consider for your product, let's first understand what is a need for a smooth and fully functional deployment strategy.</p><p>With this rapidly changing user behavior and evolving products, companies must keep up with the market demands. DevOps here plays a crucial role in avoiding last-minute failures and downtime. To keep the users away from any negative impacts, engineers have been trying different deployment strategies for a smooth and effortless product release.</p><p>In this article, we will discuss eight distinct types of software deployment strategies. Every strategy comes with its own pros and cons which may also vary from company to company.</p><p>Let's begin our journey to understand when and where a particular strategy is used in application deployment.</p><h3 id=\"basic-deployment\">Basic Deployment</h3><p>It is considered one of the riskiest strategies of all as in Basic deployment, all nodes are updated at the same time with a new service or latest artifact version. It makes the rollback process very tedious.</p><p><strong>Pros</strong></p><ol><li>It is fast, simple, and cheap.</li><li>Can be used if your application is not business or revenue critical.</li><li>Can be considered if your application is not in use or you are deploying it during the off-hours.</li></ol><p><strong>Cons</strong></p><ol><li>It is difficult to roll back to the previous version.</li><li>It is not outage-proof and falls into the riskiest category.</li></ol><h3 id=\"multi-service-deployment\">Multi-Service Deployment</h3><p>It is also one of the riskiest deployment strategies. It is used when the target environment is updated with multiple new services all at the same time. It comes in handy when applications have service or version dependency. If you are using this strategy it is recommended to do it in the off-hours or when your application is not in use.</p><p><strong>Pros</strong></p><ol><li>This strategy is fast, simple, and cheap as well.</li><li>Not as risk prone as Basic Deployment.</li></ol><p><strong>Cons</strong></p><ol><li>It makes the rollback process slow and is not outage-proof.</li><li>With this strategy managing, testing, and verifying all services is difficult.</li></ol><h3 id=\"recreate-deployment-strategy\">Recreate Deployment Strategy</h3><p>It is one of the basic ways of deployment in which the older version is completely shut down and then the updated version is made live. It brings huge downtime with it and can only be used when your application availability is not a major concern.</p><p><strong>Pros</strong></p><ol><li>It doesn't require a load balancer.</li><li>Engineers get more time to complete the process.</li></ol><p><strong>Cons </strong></p><ol><li>The downtime of the application will be based on the reboot time and the disk writing speed.</li><li>Users will be impacted in real-time.</li></ol><h3 id=\"rolling-deployment\">Rolling Deployment</h3><p>It updates the running instances of an application with the new release. Nodes are updated incrementally with the service or artifact version in integer N batches.</p><p><strong>Pros</strong></p><ol><li>Simpler to roll back.</li><li>Less risky than Basic Deployment.</li><li>Easy Implementation.</li></ol><p><strong>Cons</strong></p><ol><li>Nodes are updated in batches hence services should support both old and new versions.</li><li>Since the deployment is happening incrementally, it makes the verification and the deployment process slow.</li></ol><h3 id=\"blue-green-deployment\">Blue-Green Deployment</h3><p>It utilizes two identical environments, one Blue and another one is Green, and both are running parallelly in the production environment. Load Balancer can be used to switch the traffic from the old-Blue version to the new-Green version instantly.</p><p>Both the Blue and Green versions are available on the production, in case something went wrong, the Load Balancer can instantly switch traffic back to the old-Blue environment.</p><p><strong>Pros</strong></p><ol><li>It is simple, fast, and easy to implement.</li><li>Instant rollback.</li><li>Not risky compared to other deployment strategies.</li></ol><p><strong>Cons</strong></p><ol><li>High Infra Costs.</li><li>It can become complex and expensive to replicate the production environment.</li></ol><p>Read more about the working of Blue-Green Deployments in the below article.</p><figure class=\"kg-card kg-bookmark-card\"><a class=\"kg-bookmark-container\" href=\"http://143.244.136.65:2368/all-you-need-to-know-about-blue-green-deployments/\"><div class=\"kg-bookmark-content\"><div class=\"kg-bookmark-title\">All you Need to Know about Blue-Green Deployment Strategy</div><div class=\"kg-bookmark-description\">Blue-Green Deployment is an application release model which can reduce downtime and risk by running two identically configured production environments.</div><div class=\"kg-bookmark-metadata\"><img class=\"kg-bookmark-icon\" src=\"http://143.244.136.65:2368/favicon.png\" alt=\"\"><span class=\"kg-bookmark-author\">DevOps Blog - VegaStack</span><span class=\"kg-bookmark-publisher\">Simran Malhotra</span></div></div><div class=\"kg-bookmark-thumbnail\"><img src=\"http://143.244.136.65:2368/content/images/2021/07/All-you-Need-to-Know-about-Blue-Green-Deployments-4.png\" alt=\"\"></div></a></figure><h3 id=\"canary-deployment\">Canary Deployment</h3><p>It involves slowly rolling out the changes to a subset of users instead of rolling them to all the users at once, this approach makes it one of the safest deployment strategies. </p><p>As a subset of users is targeted, deployment can be analyzed thoroughly to assess if it is ready to be incrementally (slower) rolled out to the other sets of users. In case of any issue occurs, the deployment can be rolled back easily, for troubleshooting.</p><p><strong>Pros</strong></p><ol><li>Faster rollback process.</li><li>Provides more flexibility to developers to test the new feature and make them 100% sure to deploy the application for all the users.</li><li>It is much cheaper than blue-green deployments there is no need for two production environments.</li></ol><p><strong>Cons</strong></p><ol><li>The deployment cycle is much longer and slower.</li><li>Scripting of canary release is complex and hence is time-consuming.</li></ol><h3 id=\"ab-testing\">A/B Testing</h3><p>A/B Testing is a statistically motivated deployment strategy, different versions of the same service are run simultaneously, and data is gathered over a period which helps to decide if the updated version is good to go or not. </p><p>In A/B Testing user data is routed based on many factors like their demographics, user type, free/paid plan users, etc. </p><p><strong>Pros</strong></p><ol><li>Multiple versions can be tested at the same time with the help of different A/B testing tools.</li><li>Routing decisions are based on real-time user data.</li></ol><p><strong>Cons</strong></p><ol><li>There is a requirement for an expensive and complex Load Balancer.</li><li>The experimental nature of this deployment can sometimes break the application.</li></ol><h3 id=\"shadow-deployment-strategy\">Shadow Deployment Strategy</h3><p>In shadow deployment, the previous version is present parallelly with the updated version, and a fork version of the traffic is routed towards the updated version for testing. Once the traffic and load testing are completed successfully, the updated version is then deployed to the production.</p><p>It is one of the complex strategies as SREs must maintain two versions and need to take care of the duplicate requests that are getting generated with the forked traffic.</p><p><strong>Pros</strong></p><ol><li>Accurate performance and stability tests.</li><li>No impact on the users.</li></ol><p><strong>Cons</strong>  </p><ol><li>It is expensive as it requires double resources.</li><li>Setting it up is complex.</li><li>Higher infrastructure costs.</li></ol><h3 id=\"how-to-decide-which-deployment-strategy-to-use\">How to Decide which Deployment Strategy to Use?</h3><p>Now that you are aware of several types of Deployment Strategies, how can you decide which strategy you should follow? This depends on your application type and your target customers and environments.</p><p>We have gathered data, automating hundreds of product deployments. Companies prefer Blue-Green Deployments or Canary Deployments for critical application deployments. It is also quite common for teams to create a strategy by combining a lot of different strategies mentioned in this article.</p>",
			"comment_id":"6112928605828405533da64c",
			"feature_image":"http://143.244.136.65:2368/content/images/2021/09/Different-Product-Deployment-Strategies-in-DevOps-1.png",
			"featured":false,
			"visibility":"public",
			"email_recipient_filter":"none",
			"created_at":"2021-08-10T20:21:50.000+05:30",
			"updated_at":"2021-09-11T17:48:49.000+05:30",
			"published_at":"2021-08-18T16:10:36.000+05:30",
			"custom_excerpt":"To keep the users away from any negative impacts, engineers have been trying different deployment strategies.\nIn this article, we will discuss 8 different types of deployment strategies. Every strategy comes with its own pros and cons which vary from company to company.",
			"codeinjection_head":null,
			"codeinjection_foot":null,
			"custom_template":null,
			"canonical_url":null,
			"url":"http://143.244.136.65:2368/different-product-deployment-strategies-in-devops/",
			"excerpt":"To keep the users away from any negative impacts, engineers have been trying different deployment strategies.\nIn this article, we will discuss 8 different types of deployment strategies. Every strategy comes with its own pros and cons which vary from company to company.",
			"reading_time":5,
			"access":true,
			"send_email_when_published":false,
			"og_image":null,
			"og_title":null,
			"og_description":null,
			"twitter_image":null,
			"twitter_title":null,
			"twitter_description":null,
			"meta_title":"Different Product Deployment Strategies in DevOps",
			"meta_description":"To keep the users away from any negative impacts, engineers have been trying different deployment strategies.\nIn this article, we will discuss 8 different types of deployment strategies. Every strategy comes with its own pros and cons which vary from company to company.",
			"email_subject":null,
			"frontmatter":null
		},
		{
			"id":"613c9d70a3e4b056473cd1a2",
			"uuid":"5fa8590d-25aa-4822-b6ee-be2e179b32ac",
			"title":"CentOS 8 End of Life in 2021",
			"slug":"centos-8-end-of-life-in-2021",
			"html":"<p>CentOS 8 which earlier was going to be supported till the year 2029 has been reduced to December 2021, as per the changes announced on 8th December 2020 by Red Hat. This <a href=\"https://www.redhat.com/en/blog/faq-centos-stream-updates\">announcement</a> has left a large impact on businesses that rely on it.</p><p>Some of the pointers worth noticing:</p><ol><li>Red Hat will not be releasing the new Version i.e CentOS 9.</li><li>CentOS 8 will receive updates till December 2021 instead of 2029.</li><li>CentOS 7 will be receiving updates until June 30, 2024.</li><li>They are introducing CentOS Stream which is not a replacement for CentOS.</li></ol><h3 id=\"what-does-end-of-life-eol-mean\">What does End of Life (EOL) mean?</h3><p>The CentOS 8 EOL means that it will not be receiving any updates from the official CentOS project. It will become more vulnerable as there will be no bug fixes and security patches after 31st December 2021. It will no more be safe to use CentOS 8 after that due to the increased risk.</p><h3 id=\"the-story-behind-centos-8\">The story behind CentOS 8</h3><p>CentOS is actually a rebuild of RHEL (Red Hat Enterprise Linux). It was a downstream community project so any changes that were made to RHEL were also implemented in CentOS after a few months.</p><p>One thing that differentiates RHEL and CentOS is cost. CentOS is an open-source project and is free of cost while RHEL is a commercial Linux distribution developed by Red Hat.</p><p><strong>What is Fedora? </strong>It is an upstream community project of Red Hat. All the changes are first done in Fedora and later brought to RHEL. It serves as a testing environment. Check out the previously developed release cycle.</p><figure class=\"kg-card kg-image-card\"><img src=\"http://143.244.136.65:2368/content/images/2021/07/Fedora.jpg\" class=\"kg-image\" alt loading=\"lazy\" width=\"1072\" height=\"373\" srcset=\"http://143.244.136.65:2368/content/images/size/w600/2021/07/Fedora.jpg 600w, http://143.244.136.65:2368/content/images/size/w1000/2021/07/Fedora.jpg 1000w, http://143.244.136.65:2368/content/images/2021/07/Fedora.jpg 1072w\" sizes=\"(min-width: 720px) 720px\"></figure><h3 id=\"what-to-do-next\">What to do next?</h3><p>Considering the very short notice, users who have already migrated from CentOS 7 to CentOS 8 are stuck and Red Hat advises them to upgrade to paid RHEL, which seems to be their major reason behind their decision of early EOL of CentOS 8.</p><p>You can always switch to other Linux distributions like Ubuntu or Debian if the application workloads allow it. Make sure your apps will work properly if you switch to some other Linux distribution.</p><p>Users who are using CentOS 7 have more time to prepare as the EOL of it is June 2024.</p><h3 id=\"centos-vs-centos-stream\">CentOS vs CentOS Stream</h3><p>CentOS Stream was introduced in 2019 for testing future minor releases. It sits between Fedora and RHEL. Now Red Hat will not be releasing any new CentOS versions, it will only release CentOS Stream which is not a replacement for CentOS as its stability is not that strong when compared to CentOS.</p><figure class=\"kg-card kg-image-card\"><img src=\"http://143.244.136.65:2368/content/images/2021/07/Stream.jpg\" class=\"kg-image\" alt loading=\"lazy\" width=\"1080\" height=\"369\" srcset=\"http://143.244.136.65:2368/content/images/size/w600/2021/07/Stream.jpg 600w, http://143.244.136.65:2368/content/images/size/w1000/2021/07/Stream.jpg 1000w, http://143.244.136.65:2368/content/images/2021/07/Stream.jpg 1080w\" sizes=\"(min-width: 720px) 720px\"></figure><h3 id=\"reasons-for-starting-centos-stream\">Reasons for starting CentOS Stream</h3><ol><li>It will shorten the feedback loop as developers will be work on the upcoming RHEL's release.</li><li>It will enable transparent development, unlike the current development methods where the contribution is done behind Red Hat's firewall.</li><li>CentOS stream will enable Red Hat to release major RHEL releases every 3 years and minor changes every 6 months.</li><li>With Fedora being the only upstream project developers were limited to working for the next major release of RHEL whereas CentOS Stream will enable them to contribute to minor releases as well.</li></ol><h3 id=\"status-of-other-releases-of-centos-linux\">Status of Other Releases of CentOS Linux</h3><ol><li>No CentOS 9 release.</li><li>CentOS Linux 8 will be updated until December 2021.</li><li>CentOS Linux 7 will be updated until June 2024.</li><li>CentOS Linux 6 distribution ended on November 30, 2020.</li></ol><h3 id=\"conclusion\">Conclusion</h3><p>CentOS became popular among businesses because of its active community and stability. It offered highly customizable software packages and full control over the system leading to the popularity it got.</p><p>CentOS stream will not provide the stability required for the production environment that is the reason many businesses have already started migrating to other Linux distros such as Ubuntu or Debian.</p><p>See the official communication to know more about their announcement - <a href=\"https://www.redhat.com/en/blog/faq-centos-stream-updates\">FAQ: CentOS Stream Updates (redhat.com)</a></p><p> </p>",
			"comment_id":"60fbcbce05828405533da4e4",
			"feature_image":"http://143.244.136.65:2368/content/images/2021/09/CentOS-8-End-of-Life-in-2021.png",
			"featured":false,
			"visibility":"public",
			"email_recipient_filter":"none",
			"created_at":"2021-07-24T13:44:06.000+05:30",
			"updated_at":"2021-09-11T17:46:50.000+05:30",
			"published_at":"2021-07-24T19:59:27.000+05:30",
			"custom_excerpt":"CentOS 8 which earlier was going to be supported till the year 2029 has been reduced to December 2021, as per the changes announced on 8th December 2020 by Red Hat.",
			"codeinjection_head":null,
			"codeinjection_foot":null,
			"custom_template":null,
			"canonical_url":null,
			"url":"http://143.244.136.65:2368/centos-8-end-of-life-in-2021/",
			"excerpt":"CentOS 8 which earlier was going to be supported till the year 2029 has been reduced to December 2021, as per the changes announced on 8th December 2020 by Red Hat.",
			"reading_time":3,
			"access":true,
			"send_email_when_published":false,
			"og_image":null,
			"og_title":null,
			"og_description":null,
			"twitter_image":null,
			"twitter_title":null,
			"twitter_description":null,
			"meta_title":"CentOS 8 End of Life in 2021",
			"meta_description":"CentOS 8 which earlier was going to be supported till the year 2029 has been reduced to December 2021, as per the changes announced on 8th December 2020 by Red Hat.",
			"email_subject":null,
			"frontmatter":null
		},
		{
			"id":"613c9d70a3e4b056473cd1a1",
			"uuid":"fb7b9ccd-5e99-4068-9cb5-233257cf8b90",
			"title":"All you need to know about Blue-Green Deployment Strategy",
			"slug":"all-you-need-to-know-about-blue-green-deployments",
			"html":"<h3 id=\"what-is-blue-green-deployment\">What is Blue-Green Deployment?</h3><p>Before diving deep into the working and use cases of Blue-Green Deployments let's first understand what Blue-Green Deployment Strategy is.</p><p>Blue-Green Deployment is an application release model which can reduce downtime and risk by running two identically configured production environments called Blue and Green. Only one environment is live in the production at a time which will serve all the requests in the production environment. When Blue is live Green will be idle and vice-versa. It is also sometimes called as Red-Black Deployments.</p><h3 id=\"the-origin-of-blue-green-deployments\">The Origin of Blue-Green Deployments</h3><p>The story started in the year 2005 when two developers named Daniel North and Jez Humble ran into a problem with their e-Commerce website. Even after doing rigorous testing they still got many errors in the production.</p><p>Later after analyzing the root cause of this issue, it became clear that the errors they were getting were because of the differences between their testing and production environment. Tests were passing in their test environment but failing in the production.</p><p>Now, what they did next is generally a big no-no, they deployed and tested directly in the production environment. But the key point to notice here is that they did not overwrite their old site instead they deployed a new site parallel to their existing old site.</p><p>Now with the help of the new domain, they smoke tested the new version on production. Once the testing was complete and they were fully satisfied, they pointed the Apache Web Server to the new folder. They also had a backup plan, if in case users face any issues they had to simply run a single command and point the Apache Web Server to the old version. This came to be a very smooth transition and they were able to achieve instant rollback.</p><p>This strategy significantly improved error detection as the test and production environments were now identical.</p><figure class=\"kg-card kg-image-card\"><img src=\"http://143.244.136.65:2368/content/images/2021/07/folder-2.png\" class=\"kg-image\" alt loading=\"lazy\" width=\"2000\" height=\"1000\" srcset=\"http://143.244.136.65:2368/content/images/size/w600/2021/07/folder-2.png 600w, http://143.244.136.65:2368/content/images/size/w1000/2021/07/folder-2.png 1000w, http://143.244.136.65:2368/content/images/size/w1600/2021/07/folder-2.png 1600w, http://143.244.136.65:2368/content/images/size/w2400/2021/07/folder-2.png 2400w\" sizes=\"(min-width: 720px) 720px\"></figure><h3 id=\"working-of-blue-green-deployments\">Working of Blue-Green Deployments</h3><p>There are a few prerequisites, that a company should ensure before proceeding with Blue-Green Deployments:</p><ol><li>Two identical environments</li><li>Make sure that the new and old code can run together</li><li>A router or Load Balancer is required to switch users from one version to other</li></ol><p>Now, let's assume that V1 is the current version of the application and we want to move to the latest version V2, here V1 will be called the Blue Environment and V2 is Green Environment. The complete process can be broken down into 4 steps as follows:</p><p><strong>1) Setting Up a Load Balancer to Route Users</strong></p><p>As we have the two instances named Blue and Green, we want users to be able to access the Green (V2) instance instead of the Blue (V1) instance. We can achieve this using a Load Balancer instead of a DNS record exchange as DNS propagation is not spontaneous.</p><p>Load Balancers and routers help in switching users from the Blue instance to the Green instance. Changing the DNS name will not be required as the Load Balancer will reference the same DNS but routes the new traffic to the Green Environment. With this approach, we will get full control of the users which will help us to switch back to the V1 (Blue Instance) in case anything goes wrong.</p><figure class=\"kg-card kg-image-card\"><img src=\"http://143.244.136.65:2368/content/images/2021/07/Blue-Green-Deployment-Architecture-1.png\" class=\"kg-image\" alt loading=\"lazy\" width=\"2000\" height=\"1125\" srcset=\"http://143.244.136.65:2368/content/images/size/w600/2021/07/Blue-Green-Deployment-Architecture-1.png 600w, http://143.244.136.65:2368/content/images/size/w1000/2021/07/Blue-Green-Deployment-Architecture-1.png 1000w, http://143.244.136.65:2368/content/images/size/w1600/2021/07/Blue-Green-Deployment-Architecture-1.png 1600w, http://143.244.136.65:2368/content/images/2021/07/Blue-Green-Deployment-Architecture-1.png 2240w\" sizes=\"(min-width: 720px) 720px\"></figure><p><strong>2) Executing the Update</strong></p><p>When the Green Instance is ready, we will move it to production and run it in parallel with the older version. Using Load Balance traffic can be routed from V1 to V2 seamlessly without being noticed by the users. They won't even realize that now they are accessing the new version of the application.</p><p><strong>3) Monitoring the Environments</strong></p><p>DevOps Engineers will get very little time to run smoke tests on the Green instance, once the traffic is switched from Blue to Green instance. They need to figure out very quickly if there are any issues in the new version before users get impacted on a large scale. They need to ensure that everything is running as expected on the new version.</p><p><strong>4) Deployment or Rollback</strong></p><p>Green Instance is monitored very closely as there might be some issues that users may face. For all this time Blue instance will be kept on standby.</p><p>If DevOps Engineers find any issues during the smoke test, traffic will be instantly diverted back to the Blue instance without facing any hiccups. If everything goes well after a considerable time of monitoring, the Green Instance will then become the Blue Instance for the next release.</p><h3 id=\"with-cloud-blue-green-deployments-become-more-feasible\">With Cloud, Blue-Green Deployments Become More Feasible</h3><p>It gets very expensive to keep two sets of instances up all the time. Fortunately, we have platforms like Terraform and Ansible to start and stop the environments on-demand basis. The release process can be simplified using Containers or Kubernetes.</p><p>With the cloud, we get flexibility and cost reduction and Blue-Green Deployment Strategy is within everyone's reach.</p><p>To conclude if Blue-Green Deployment is the right strategy for you, let's check out some of its benefits and Drawbacks.</p><h3 id=\"benefits-of-using-blue-green-deployments\">Benefits of Using Blue-Green Deployments</h3><p><strong>Improved Customer Experience: T</strong>ransition from the old version to the new version is so seamless that users don't face any downtime. They don't even realize any changes.</p><p><strong>No specific upgrade schedule for developers: </strong>With Blue-Green Deployment Strategy, continuous deployment becomes feasible and there is no requirement of specific maintenance windows for the release.</p><p><strong>Testing Parity: </strong>New version can be tested accurately with identical hardware and software.</p><p><strong>Instant Rollbacks: </strong>If in case DevOps Engineers find some issues in the new version, they can quickly roll back to the previous version without getting noticed and impacting the user experience.</p><p>With the Blue-Green Deployment Strategy, developers no more have to wait for low traffic windows to deploy their changes. New releases can be pushed to production the moment developers are ready with their code.</p><figure class=\"kg-card kg-image-card\"><a href=\"https://public.vegastack.com/dist/p/Blue-Green-Deployment-Benefits.pdf\"><img src=\"http://143.244.136.65:2368/content/images/2021/07/Benefits-of-Blue-Green-Deployments.png\" class=\"kg-image\" alt=\"Benefits of Blue-Green Deployments\" loading=\"lazy\" width=\"2000\" height=\"425\" srcset=\"http://143.244.136.65:2368/content/images/size/w600/2021/07/Benefits-of-Blue-Green-Deployments.png 600w, http://143.244.136.65:2368/content/images/size/w1000/2021/07/Benefits-of-Blue-Green-Deployments.png 1000w, http://143.244.136.65:2368/content/images/size/w1600/2021/07/Benefits-of-Blue-Green-Deployments.png 1600w, http://143.244.136.65:2368/content/images/2021/07/Benefits-of-Blue-Green-Deployments.png 2240w\" sizes=\"(min-width: 720px) 720px\"></a></figure><h3 id=\"the-downside-of-using-blue-green-deployments\">The Downside of Using Blue-Green Deployments</h3><p><strong>High Costs: </strong>Blue Green Deployments are much more expensive as compared to any other deployment strategy. On-demand infrastructure provisioning helps to a certain extent but multiple deployments per day can lead to high costs.</p><p><strong>Time Consuming:</strong> Blue-Green Deployment setup takes time as it is complex and needs many iterations until we get it working perfectly.</p><p><strong>Database Migration: </strong>Database changes must be in sync as anything goes wrong it becomes very difficult to get things back to normal. The changes should be backward and forward compatible. It becomes necessary to keep one of the databases read-only or use replication.</p><p>As a database is a shared service, it can leak information between Blue and Green Instance. This one environment can impact the other one and could break isolation and impact the deployment.</p><h3 id=\"conclusion\">Conclusion</h3><p>Even if Blue-Green Deployment Strategy is costly, it is a widely used practice among many organizations. Every deployment technique has its pros and cons, therefore teams should collaborate closely to choose the right deployment technique.</p><p>As there is no fixed approach that will suit every scenario, organizations should do thorough research before settling with any particular deployment strategy.</p>",
			"comment_id":"60ec65a705828405533da234",
			"feature_image":"http://143.244.136.65:2368/content/images/2021/09/All-you-Need-to-Know-about-Blue-Green-Deployments-4-2.png",
			"featured":true,
			"visibility":"public",
			"email_recipient_filter":"none",
			"created_at":"2021-07-12T21:24:15.000+05:30",
			"updated_at":"2021-09-11T17:49:16.000+05:30",
			"published_at":"2021-07-19T20:32:53.000+05:30",
			"custom_excerpt":"Blue-Green Deployment is an application release model which can reduce downtime and risk by running two identically configured production environments.",
			"codeinjection_head":null,
			"codeinjection_foot":null,
			"custom_template":null,
			"canonical_url":null,
			"url":"http://143.244.136.65:2368/all-you-need-to-know-about-blue-green-deployments/",
			"excerpt":"Blue-Green Deployment is an application release model which can reduce downtime and risk by running two identically configured production environments.",
			"reading_time":5,
			"access":true,
			"send_email_when_published":false,
			"og_image":null,
			"og_title":null,
			"og_description":null,
			"twitter_image":null,
			"twitter_title":null,
			"twitter_description":null,
			"meta_title":"All you Need to Know about Blue-Green Deployment Strategy",
			"meta_description":"Blue-Green Deployment is an application release model which can reduce downtime and risk by running two identically configured production environments.",
			"email_subject":null,
			"frontmatter":null
		},
		{
			"id":"613c9d70a3e4b056473cd19f",
			"uuid":"8ecf9816-cff5-488b-8d79-04ded914b8ea",
			"title":"What is Continuous Integration, Continuous Delivery, and Continuous Deployment?",
			"slug":"continuous-integration-continuous-deployment-continuous-delivery",
			"html":"<p>CI and CD are two important terms that are often used when people talk about DevOps and Automation. </p><p>Ever wondered about what is Continuous Integration (CI) or Continuous Delivery (CD)? What is the difference between Continuous Deployment and Continuous Delivery?</p><p>In this article, we will answer these questions, and learn all about these practices and how they may or may not work for your projects.</p><h2 id=\"introduction\">Introduction</h2><p><strong>CI</strong> stands for Continuous Integration, that focuses on streamlining builds and testing process of an application.</p><p><strong>CD</strong> stands for Continuous Deployment or Continuous Delivery, depending on how the processes are defined. Both of these practices have a lot of similarities, with a very significant difference.</p><p>Let's understand each of these practices in detail now.</p><h2 id=\"what-is-continuous-integration-ci-\">What is Continuous Integration (CI)?</h2><blockquote>In simple terms, CI is the process of merging all the Developer code changes to a single shared main branch as often as possible, frequently.</blockquote><p>Developers merge their code changes, many times a day to the remote Git Repository's main branch. These code changes are then verified and validated by using automation to create builds and run tests on the created builds.</p><p>For those who follow the <a href=\"https://en.wikipedia.org/wiki/Waterfall_model\">Waterfall</a> methodology, this practice might sound hectic and complex. On the contrary, at any given time the code changes being pushed are smaller. Therefore, it is easier to debug and resolve if any issues arise.</p><p>So, the new code changes being pushed are built, integrated and tested in a few minutes, providing immediate feedback to the developer about the code status and any issues.</p><p>Continuous Integration ensures that the application is not broken whenever new commits from all the developers are integrated into the Release branch of the Repository, as they are all tested well in advance.</p><h2 id=\"what-is-continuous-delivery-cd-\">What is Continuous Delivery (CD)?</h2><blockquote>Continuous Delivery is the practice where the code changes are released frequently in shorter cycles to customers, quickly and reliably.</blockquote><p>In continuation with Automated Testing in CI, the application Release process is completely automated so that the code changes can be deployed incrementally at any point of time by just clicking a button (manual trigger).</p><p>Generally, shorter release cycles are recommended. Depending on the size of the project, and business requirements, you can configure daily, weekly, fortnightly release schedules. </p><p>The shorter the release cycle the easier it is to troubleshoot in case of any issue after deployment onto a Production environment.</p><h2 id=\"what-is-continuous-deployment-cd-\">What is Continuous Deployment (CD)?</h2><blockquote>Continuous Delivery without a manual trigger is Continuous Deployment.</blockquote><p>In Continuous Deployment, every code change is directly released to customers without any manual intervention if it successfully passes all the stages of your CI/CD pipeline.</p><p>So, if there are no failures in any pipeline tests, every code change is available to the customers immediately. No more Release days!</p><p>It is very useful to improve the feedback loop with your customers. Developers can see their changes Go-Live in a few minutes, providing them more time to focus on building better quality applications.</p><p>This level of automation is made possible by a combination of several different tools and processes that work together to verify and push the code changes to production.</p><p>Once the developer pushes the new code change, it is automatically built, integrated, tested, and directly deployed to the production environment.</p><h2 id=\"what-is-the-difference-between-continuous-delivery-and-continuous-deployment\">What is the difference between Continuous Delivery and Continuous Deployment?</h2><p>Continuous Delivery involves manual triggers and human decision-making around what and when to release to the customers. This forms the basis of the difference between Continuous Delivery and Continuous Deployment.</p><p>In Continuous Deployment, every code change goes through automated tests and verifications, and if everything is passed successfully, a working version of the application is automatically pushed to production. </p><p>Naturally, a lot depends on the quality and efficiency of the test suite and the CI/CD pipeline. With Continuous Deployment, teams can have multiple application deployments on any given day.</p><p>Also, Continuous Delivery usually involves a Production-like Staging environment with a mandatory time lag before the final release. This time is used to manually review and accept the code changes before they are released to Production.</p><p>In contrast, Continuous Deployment doesn't generally have any Staging environment for code changes to be manually reviewed or accepted. This is mainly because all the code changes are already verified early in the development and passed through all the stages of the pipeline.</p><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"http://143.244.136.65:2368/content/images/2020/08/continuous-integration-continuous-deployment-summary-pwslab.png\" class=\"kg-image\" alt=\"CI and CD Summary\" loading=\"lazy\"><figcaption>CI and CD Summary</figcaption></figure><h2 id=\"how-to-go-from-continuous-integration-to-continuous-deployment\">How to go from Continuous Integration to Continuous Deployment?</h2><p><strong>If you are beginning a new project </strong>with just a few contributors, it might be easy to directly deploy every code change to production i.e. Continuous Deployment. You can start automating your deployment process and directly release your code changes for Alpha and Beta Releases to production. </p><p>Later, before you begin adding users/customers, start adding test jobs to the CI/CD pipeline, making sure the <a href=\"https://en.wikipedia.org/wiki/Code_coverage\">code coverage</a> is adequate, as you build your application. By the time you gain more users, you will have an efficient and stable CI/CD pipeline where all the new code changes are well tested before they are released to production automatically.</p><p><strong>If you already have an existing application</strong> with users you should start adopting these practices slowly. You can begin with Continuous Integration and Continuous Delivery. Review your processes regularly and iterate the CI/CD pipelines based on customer feedback and business requirements.</p><p>Then, slowly start including basic Unit tests that get executed automatically, complex end-to-end functional tests need not be a priority in the early phases. Instead, focus on automating your deployments as much as possible and get to a stage where application deployments to your Staging or Pre-Prod environments are done automatically.</p><p>The reason you need to focus more on automating deployments is that, in most of the cases, a lot of time and effort is spent on actually deploying the code changes to your target environments. Once, you achieve Deployment automation, you can gradually shift your focus again on improving your automated tests.</p><p>But, make sure the rest of the organization like Documentation, Sales, Support and Marketing teams are ready to handle the Releases being deployed frequently. These teams will need to revamp and adapt to the new automated processes, without causing any noticeable impact on the customers.</p><h2 id=\"conclusion\">Conclusion</h2><p>Whether your organization follows one of these practices or something else altogether, the key requirement to improve product quality and delivery efficiency is by enabling automation as much as possible in the delivery pipeline. This will ensure sustainable and reliable product delivery to your customers.</p><p>The goal is to develop a high-level of automation in the application delivery, without giving up on the visibility and control of the overall process.</p>",
			"comment_id":"5f33fd5e011e60112a2318ab",
			"feature_image":"http://143.244.136.65:2368/content/images/2021/09/What-is-Continuous-Integration--Continuous-Delivery-and-Continuous-Deployment.webp",
			"featured":true,
			"visibility":"public",
			"email_recipient_filter":"none",
			"created_at":"2020-08-12T20:01:58.000+05:30",
			"updated_at":"2021-09-11T17:57:41.000+05:30",
			"published_at":"2020-08-14T02:00:00.000+05:30",
			"custom_excerpt":"CI and CD are two important terms that are often used when people talk about DevOps and Automation. ",
			"codeinjection_head":null,
			"codeinjection_foot":null,
			"custom_template":null,
			"canonical_url":null,
			"url":"http://143.244.136.65:2368/continuous-integration-continuous-deployment-continuous-delivery/",
			"excerpt":"CI and CD are two important terms that are often used when people talk about DevOps and Automation. ",
			"reading_time":4,
			"access":true,
			"send_email_when_published":false,
			"og_image":null,
			"og_title":null,
			"og_description":null,
			"twitter_image":null,
			"twitter_title":null,
			"twitter_description":null,
			"meta_title":"Continuous Integration vs Continuous Deployment vs Continuous Delivery",
			"meta_description":"Learn all about Continuous Integration, Continuous Deployment and Continuous Delivery, and how they may or may not be suitable for your projects. ",
			"email_subject":null,
			"frontmatter":null
		},
		{
			"id":"613c9d70a3e4b056473cd19c",
			"uuid":"78c3c7bf-1b62-44c2-af58-ba25ddba4cf9",
			"title":"The 11 Rules of GitLab Flow",
			"slug":"the-11-rules-of-gitlab-flow",
			"html":"<h3 id=\"introduction\">Introduction</h3><p>There are many attributes of good quality software: robustness, testability, resilience, modularity, maintainability, usability, security, performance, scalability and more depending on the type of application you are building. To achieve all this you need to have a simplified workflow. In this post we will be sharing <strong><strong>11 thumb rules of  Git</strong>Lab<strong> flow</strong></strong> which will produce a much cleaner and efficient results.</p><h3 id=\"11-thumb-rules-of-gitlab-flow\">11 Thumb Rules of GitLab Flow</h3><h3 id=\"1-create-feature-branch-to-avoid-direct-commits-on-master-\">1) Create feature branch to avoid direct commits on master.</h3><p>Feature Branch is just a different <strong><strong>branch </strong></strong>in the <strong><strong>Git</strong></strong> repo which helps in avoiding direct commit to the master. It helps in reviewing code before merging.</p><blockquote>The basic idea of a feature branch is that when you start work on a feature you take a branch of the repository to work on that feature.</blockquote><h3 id=\"2-testing-of-all-commits-is-necessary-not-just-the-ones-in-master-\">2) Testing of all commits is necessary, not just the ones in master.</h3><p>If you have configured your pipeline in such a way that it only test the commit in master, <strong><strong>change it</strong></strong>. You should be confident before running tests on master branch.</p><h3 id=\"3-code-reviews-should-be-done-before-merging-to-master-not-after-\">3) Code reviews should be done before merging to master, not after.</h3><p>Do code reviews regularly because it’s easier to figure out things earlier that can create issues rather than spending time later on the same thing.</p><h3 id=\"4-run-all-the-tests-on-each-and-every-commit-\">4) Run all the tests on each and every commit.</h3><p>Don’t wait for the right time to run tests on your commits. Even if you are on a feature branch run the tests then and there. You can also run the tests in parallel if its taking more than 5 minutes.</p><h3 id=\"5-do-automated-deployments-instead-of-manual-\">5) Do automated deployments instead of manual.</h3><p>If you are not ready to do deploy on master, create another production branch and automate your tasks there, instead of manually logging in and running numerous scripts.</p><blockquote>Spending less time on deployment simply means you can save money and release more frequently.</blockquote><h3 id=\"6-users-have-the-privilege-to-set-tags-not-ci-\"><br>6) Users have the privilege to set tags, not CI.</h3><p>Tags are set by the user and then CI will take actions based on the set tags.</p><h3 id=\"7-you-should-never-rebase-the-pushed-commits-\">7) You should never rebase the pushed commits.</h3><p>It is not advisable to rebase the pushed commits because it makes difficult to follow afterwards and it also breaks Cherry Picking.</p><blockquote>It’s OK to rebase published commits under one condition, that everyone who will have to deal with the problems created, has agreed in advance to deal with them.</blockquote><h3 id=\"8-releases-are-created-based-on-tags-\">8) Releases are created based on tags.</h3><p>Tagging something will create a new release.</p><h3 id=\"9-bug-fixing-should-be-done-in-master-first-and-later-in-release-branch-\">9) Bug fixing should be done in master first and later in release branch.</h3><p>The <strong><strong>worst </strong></strong>approach you can follow for bug fixing is to fix them in just-released version and not in the <strong><strong>master</strong></strong>. You should always fix forward. After fixing in master, you can cherry-pick the changes in release branch.</p><h3 id=\"10-everything-starts-from-master-and-ends-at-master-\">10) Everything starts from Master and ends at Master.</h3><p>To avoid any long branches, you should at first <strong><strong>checkout</strong></strong> master, work on your feature, raise merge request and target master again. Also, review your complete code before merging it to master.</p><h3 id=\"11-follow-commit-message-standards-\">11) Follow commit message standards.</h3><p>Your commit message should clearly define what you did and why you did it.</p><ul><li>Each fix should be committed as a separate change.</li><li>It’s very useful to <strong><strong>reference</strong></strong> the git issue on the body of your commit message.</li><li>Limit the subject line to <strong><strong>50 characters</strong></strong>.</li><li><strong><strong>Capitalize</strong></strong> only the first letter in the subject line.</li><li>Don’t put a <strong><strong>period</strong></strong> at the end of the subject line.</li></ul><h3 id=\"conclusion\">Conclusion</h3><p>In this post you have learnt the 11 rules of GitLab Flow for getting efficient and cleaner results.</p><ul><li>Create a separate branch to avoid commits on master, it is also advisable to do regular testing on the features you are working on.</li><li>Avoid manual deployments, save time and money by automating the process.</li><li>Fix forward, bug fixing should be done in master branch first and then in release branch.</li><li>Make your intent clear behind every commit in a commit message, it should clearly convey what you did and why you did it.To learn more about Git Branching Flows, follow this famous article by Vincent Driessen –  <a href=\"https://nvie.com/posts/a-successful-git-branching-model/\">https://nvie.com/posts/a-successful-git-branching-model/</a></li></ul>",
			"comment_id":"5f02e2f3f2297217cef1802a",
			"feature_image":"http://143.244.136.65:2368/content/images/2021/09/GitLab-Flow.webp",
			"featured":false,
			"visibility":"public",
			"email_recipient_filter":"none",
			"created_at":"2020-07-06T14:08:11.000+05:30",
			"updated_at":"2021-09-11T17:45:11.000+05:30",
			"published_at":"2020-07-06T14:21:44.000+05:30",
			"custom_excerpt":null,
			"codeinjection_head":null,
			"codeinjection_foot":null,
			"custom_template":null,
			"canonical_url":null,
			"url":"http://143.244.136.65:2368/the-11-rules-of-gitlab-flow/",
			"excerpt":"Introduction\nThere are many attributes of good quality software: robustness, testability,\nresilience, modularity, maintainability, usability, security, performance,\nscalability and more depending on the type of application you are building. To\nachieve all this you need to have a simplified workflow. In this post we will be\nsharing 11 thumb rules of  GitLab flow which will produce a much cleaner and\nefficient results.\n\n11 Thumb Rules of GitLab Flow\n1) Create feature branch to avoid direct commits",
			"reading_time":3,
			"access":true,
			"send_email_when_published":false,
			"og_image":null,
			"og_title":null,
			"og_description":null,
			"twitter_image":null,
			"twitter_title":null,
			"twitter_description":null,
			"meta_title":null,
			"meta_description":null,
			"email_subject":null,
			"frontmatter":null
		},
		{
			"id":"613c9d70a3e4b056473cd19b",
			"uuid":"effbdfd3-5b61-40a2-a820-af57ff730594",
			"title":"Cloud vs In-House Servers",
			"slug":"cloud-vs-in-house-servers",
			"html":"<p>The biggest decision is whether to have a cloud-based or in-house server infrastructure. While it may sound like a black-or-white selection, there are many things to consider. The first factor is how important uptime is to your business. Cloud solutions are usually more expensive than in-house, but the benefits of being in the cloud can far outweigh the costs for some businesses. For example, an online business that is reliant on web-based transactions will consider uptime an extremely important factor; therefore, they will likely be willing to pay more for a cloud-based solution that can guarantee a certain level of uptime. Other businesses not as dependent on uptime may be more suited to an in-house setup.</p><p>Here are some pros and cons of cloud vs in-house servers.</p><h3 id=\"in-house-server\">In-House Server</h3><h3 id=\"pros\">Pros</h3><ul><li>Gives you physical control over your backup.</li><li>Keeps critical data in-house. No third party has access to your information.</li><li>No need to rely on an Internet connection for access to data.</li><li>Can be more cost-effective for small to mid-sized companies.</li></ul><h3 id=\"cons\">Cons</h3><ul><li>Requires a capital investment in hardware and infrastructure.</li><li>Needs space in your office for a rack or server room/closet, in addition to dedicated IT support.</li><li>Maybe more susceptible to data loss during disaster situations due to its in-house location. How often you take the data offsite will reflect how much data you’ll lose in an emergency.</li><li>No uptime or recovery time guarantees.</li></ul><h3 id=\"cloud-server\">Cloud Server</h3><h3 id=\"pros-1\">Pros</h3><ul><li>No need for onsite hardware or capital expenses. Well-suited to smaller companies that may outgrow storage too quickly.</li><li>Storage can be added as needed. Solutions are often on-demand, so you only pay for what you need.</li><li>Backup and restore can be initiated from anywhere, using any computer, tablet, or smartphone.</li><li>Data can be backed up in the cloud as regularly as 15-minute intervals, minimizing data losses in disaster situations. Small data set recovery time is improved.</li></ul><h3 id=\"cons-1\">Cons</h3><ul><li>Full data recovery could prove very time-consuming and impactful on systems.</li><li>If the Internet goes down on your side or on your cloud provider’s side, you won’t have access to any of your information.</li><li>Every organization will have a limit to data that can be stored in the cloud due to storage availability and cost.</li><li>The costs of the data recovery could outweigh the benefits for companies that are not as dependent on uptime and instant recovery.</li></ul>",
			"comment_id":"5f02ce5bf2297217cef1801f",
			"feature_image":"http://143.244.136.65:2368/content/images/2021/09/Cloud-vs-In-House-Servers.png",
			"featured":false,
			"visibility":"public",
			"email_recipient_filter":"none",
			"created_at":"2020-07-06T12:40:19.000+05:30",
			"updated_at":"2021-09-11T17:51:14.000+05:30",
			"published_at":"2020-07-06T12:58:55.000+05:30",
			"custom_excerpt":null,
			"codeinjection_head":null,
			"codeinjection_foot":null,
			"custom_template":null,
			"canonical_url":null,
			"url":"http://143.244.136.65:2368/cloud-vs-in-house-servers/",
			"excerpt":"The biggest decision is whether to have a cloud-based or in-house server\ninfrastructure. While it may sound like a black-or-white selection, there are\nmany things to consider. The first factor is how important uptime is to your\nbusiness. Cloud solutions are usually more expensive than in-house, but the\nbenefits of being in the cloud can far outweigh the costs for some businesses.\nFor example, an online business that is reliant on web-based transactions will\nconsider uptime an extremely important",
			"reading_time":2,
			"access":true,
			"send_email_when_published":false,
			"og_image":null,
			"og_title":null,
			"og_description":null,
			"twitter_image":null,
			"twitter_title":null,
			"twitter_description":null,
			"meta_title":null,
			"meta_description":null,
			"email_subject":null,
			"frontmatter":null
		},
		{
			"id":"613c9d70a3e4b056473cd19a",
			"uuid":"865db69a-70ec-4f86-ab35-28a972ba3d03",
			"title":"Top 10 Benefits of Cloud-Based Browser Testing",
			"slug":"top-10-benefits-of-cloud-based-browser-testing",
			"html":"<p>The boom of cloud computing is creating a massive impact on the IT sector in all terms. Usually, there are a number of tests that are performed on a cloud network such as cloud-based browser testing, functional testing, non-functional testing, and much more. Earlier testing used to be done on the on-premise environment, but with the cloud, testing is now more accessible and faster. Cloud-based testing is creating new opportunities, technologies, and easy access.</p><p>But many people are still in a dilemma about the benefits of using cloud-based browser testing. In this article, we will clear all your doubts regarding cloud-based testing.</p><p>Nowadays web apps should support various browsers, therefore there is a requirement of testing the applications on various browsers. The importance of cloud-based browser testing and its benefits are much vast than the challenges that the cloud has.</p><h3 id=\"what-is-cloud-based-browser-testing\">What is cloud-based browser testing?</h3><p>Cloud-based Testing of applications is a feasible &amp; viable solution for enterprises. For applications, it offers Web-based access to a large pool of real devices connected to live networks spread globally. It provides enterprises with end-to-end control for manual and automated testing practices.</p><p>By now, most enterprises have used or at least have heard about cloud computing. However, with the advancement of technology and the rapid increase in the number of users, the need for Cloud computing is increasing considerably. Before adopting this new technology for your own business needs, it is important to understand the benefits of Cloud-based Testing for your applications.</p><h3 id=\"benefits-of-cloud-based-browser-testing\">Benefits of cloud-based browser testing</h3><h3 id=\"1-easily-scalable\">1. Easily Scalable</h3><p>It is quite true that the applications need a different level of testing practice at various points in their development life cycle. Automating the testing tasks is preferred more than deploying more testers to share the burden. Many cloud-based tools are available for achieving functional testing, performance testing and many other types of testing. Cloud-based testing can be used to completely manage testing jobs. Since it is cloud-based therefore it is easy to install, configure and maintain. In simple words, cloud-based testing will allow computing resources to increase or decrease whenever required. It can be used as a comprehensive test management tool.</p><h3 id=\"2-browsers-versions-and-different-browsers\">2. Browsers Versions and Different Browsers</h3><p>There are many different browsers like Chrome, Opera, Safari, FireFox but each of them has their different versions too. It is really very important to test applications on different browser and their versions. Doing the testing manually is very cumbersome but by using cloud-based browser testing services, different versions of browsers can be tested using the cloud tools.</p><h3 id=\"3-easy-integration\">3. Easy Integration</h3><p>Testing can’t be addressed later. It has to go side by side of the development process. As soon as the new code is added it must be tested and then redeployed. Since the testing is cloud-based, the tools can be integrated with different infrastructure and platforms. Continuous testing will ensure that the web apps do not fail in a production environment, and if it fails, it is easier to roll back to the stable version.</p><h3 id=\"4-cost-cutting\">4. Cost Cutting</h3><p>Cloud-based tools are very reasonable than regular web automation tools. Adoption of regular web automation tool is very costly considering the upgradation of hardware and infrastructure. The biggest advantage of cloud-based tools is that it charges only when you are using the service and when the service is not being used your money is saved. This is very helpful for the companies who are looking to cut down the costs.</p><h3 id=\"5-cloud-accessibility\">5. Cloud Accessibility</h3><p>Using the cloud-based technologies there are no time constraints. Remote teams are present across the globe and work round the clock. The test environment is always accessible and therefore testing can happen anytime. This leads to faster time to market and great customer experience. The best part about using cloud-based testing tool is that you can access your projects anywhere, anytime and can update the central repository to track and share data.</p><h3 id=\"6-configurable-test-environment\">6. Configurable Test Environment</h3><p>The testing of various configurations ensures that the web apps and integration with the various browsers are robust and have a safe and secure failover.</p><p>Multiple browser testing generally takes time to make arrangements. There is a high probability that the error that has occurred in one environment will repeat itself due to the respective configurations. But cloud-based browser testing can be pre-configured.</p><h3 id=\"7-thorough-testing\">7. Thorough Testing</h3><p>Tests using cloud-based browser testing is thorough with respect to versions, types of testing, browsers, and platforms. It turns to be very costly if on-premise test practices are adopted.</p><p>There are different types of browser testing such as functional testing, system testing, acceptance testing, and integration testing. Nonfunctional testing includes business requirement testing, security testing, scalability, and performance testing. Ability testing includes testing such as browser compatibility testing and interoperability testing, disaster recovery testing and multitenancy testing. All these tests can be easily performed on the browsers for the web apps in the cloud environment.</p><h3 id=\"8-economical-testing-solution\">8. Economical testing solution</h3><p>Using cloud-based browser testing there is no need to buy devices for your teams located at different locations. It requires less hardware and no license cost for every seat. It is way cheaper than general testing solutions. Using this approach leads to faster deployments and less project start-up and infrastructure cost.</p><h3 id=\"9-parallel-execution\">9. Parallel Execution</h3><p>Coupled with the right web test automation tool like selenium, parallel execution enables you to run the same tests on multiple environments and configurations all at the same time. Instead of being limited to your computer infrastructure, you can run a test on different environments all of their own combination of sizes, versions, operating systems, even under different simulated network conditions.</p><h3 id=\"10-better-collaboration-between-teams\">10. Better Collaboration Between Teams</h3><p>Cloud-based testing brings great collaboration between every team involved in the project, such as development, testing, and production teams. Due to their collaboration, it becomes quite easy to enable DevOps for Dev and Ops teams. Testing can happen in the cloud environment easily with the communications tools, which enables teams located worldwide to collaborate and help them stay on the same page.</p>",
			"comment_id":"5f02cbd4f2297217cef18014",
			"feature_image":"http://143.244.136.65:2368/content/images/2021/09/Cloud-Based-Testing-Benefits.png",
			"featured":false,
			"visibility":"public",
			"email_recipient_filter":"none",
			"created_at":"2020-07-06T12:29:32.000+05:30",
			"updated_at":"2021-09-11T17:51:58.000+05:30",
			"published_at":"2020-07-06T12:39:15.000+05:30",
			"custom_excerpt":null,
			"codeinjection_head":null,
			"codeinjection_foot":null,
			"custom_template":null,
			"canonical_url":null,
			"url":"http://143.244.136.65:2368/top-10-benefits-of-cloud-based-browser-testing/",
			"excerpt":"The boom of cloud computing is creating a massive impact on the IT sector in all\nterms. Usually, there are a number of tests that are performed on a cloud\nnetwork such as cloud-based browser testing, functional testing, non-functional\ntesting, and much more. Earlier testing used to be done on the on-premise\nenvironment, but with the cloud, testing is now more accessible and faster.\nCloud-based testing is creating new opportunities, technologies, and easy\naccess.\n\nBut many people are still in a d",
			"reading_time":4,
			"access":true,
			"send_email_when_published":false,
			"og_image":null,
			"og_title":null,
			"og_description":null,
			"twitter_image":null,
			"twitter_title":null,
			"twitter_description":null,
			"meta_title":null,
			"meta_description":null,
			"email_subject":null,
			"frontmatter":null
		},
		{
			"id":"613c9d70a3e4b056473cd199",
			"uuid":"57b98497-8a7f-4e39-b277-2764824ed552",
			"title":"Hybrid Cloud v/s Multi-Cloud: Difference and Benefits",
			"slug":"hybrid-cloud-v-s-multi-cloud-difference-and-benefits",
			"html":"<p>There is much confusion about the constituents of the hybrid cloud and a multi-cloud. Generally, they are used interchangeably. Let’s understand in detail the difference between the two.</p><h3 id=\"what-is-hybrid-cloud\">What is Hybrid Cloud?</h3><p>In simple terms, the combination of on-premise infrastructure (Private Cloud) with Public Cloud is called Hybrid Cloud. Another name for Hybrid Cloud is Hybrid IT.</p><h3 id=\"what-is-multi-cloud\">What is Multi-Cloud?</h3><p>Multi-cloud is a form of hybrid cloud, but it’s a specialized term used for multiple different public cloud environments. Not using Multi-Cloud leads to vendor lock-in. Using a multi-cloud is usually a part of a strategy to avoid lock-in with a single cloud vendor.</p><figure class=\"kg-card kg-image-card\"><img src=\"http://143.244.136.65:2368/content/images/2020/07/cloud-768x512-1.jpg\" class=\"kg-image\" alt loading=\"lazy\"></figure><h3 id=\"difference-between-hybrid-cloud-and-multi-cloud\">Difference between Hybrid Cloud and Multi-Cloud</h3><p><strong><strong>So now that we have understood the difference, let’s see which cloud is suitable for which scenario.</strong></strong></p><p>An important thing to understand is that the ‘right’ cloud solution for businesses is neither public nor private, but both. This leads to the conclusion that running a hybrid cloud is a solution. But, leveraging multiple types of cloud services i.e Multi-cloud is a new deployment model that is getting famous these days.</p><p>Realizing that the cloud is no longer a singular noun the term “multi-cloud” came into existence. Companies now run multiple clouds, in different ways to address multiple use-cases.</p><p>While these terms make sense intuitively, there are multiple questions associated with these terms. <strong><strong>Is there a difference really in multi-cloud deployment and hybrid cloud or it is just an IT marketing buzzword?</strong></strong></p><p>An organization uses multiple different cloud services, from different public cloud providers in a multi-cloud solution. The main aim to use different clouds for various tasks is to achieve best-of-breed results. It also <strong><strong>removes</strong></strong> <strong><strong>vendor lock-in</strong></strong>.</p><p>The way finance has a different need than software development and delivery and different cloud solutions can address those needs more effectively. Using services from different cloud providers also gives organizations the satisfaction and peace of mind by reducing the dependency on any one cloud service provider, which ultimately decreases cost and gives high flexibility.</p><p>Whatever the reason for their multi-cloud strategy, organizations end up operating in combination with on-premise physical or private cloud infrastructure. In other words, a multi-cloud strategy starts with taking services from various public cloud providers but also sometimes include some on-premise deployments.</p><p>The hybrid cloud approach combines private and public clouds to achieve the same goal.</p><h3 id=\"hybrid-cloud-differs-from-multi-cloud-in-the-following-ways\">Hybrid Cloud differs from multi-cloud in the following ways</h3><ol><li>Hybrid always includes private and public, while multi-cloud always includes multiple public clouds but can also incorporate physical and virtual infrastructure (including private clouds).</li><li>Unlike a multi-cloud model, in which different clouds are used for different tasks, the components of a hybrid cloud typically work together. As a result, data and processes tend to intermingle and intersect in a hybrid environment, while in a multi-cloud situation, usage typically remains in its “own” cloud’s silo.</li></ol><h3 id=\"let-s-understand-this-with-an-example-\">Let’s understand this with an example.</h3><p>What does an application running in a Hybrid Cloud framework look like? It could use load balancing, web, and application services from a public cloud while the database and storage live in a private cloud. It has compute resources that perform the same function in both a private and a public cloud and may swap how much compute is used in either cloud-based on load and cost.</p><p>An application in a multi-cloud environment that is not hybrid, on the other hand, may run all compute and networking activities in AWS while using database services from Azure. In this multi-cloud environment, some applications leverage resources only in Azure while separate applications use resources only in AWS; or, applications may use resources only in the public cloud while others leverage resources only in the private cloud.</p><p><strong><strong>Now let’s understand the benefits of using them individually.</strong></strong></p><h3 id=\"benefits-of-multi-cloud\">Benefits of Multi-Cloud</h3><h3 id=\"1-ability-to-find-the-best-in-class-multi-cloud-providers\">1. Ability to Find the Best-in-Class Multi-Cloud Providers</h3><p>Incorporating a multi-cloud strategy in an organization enables administrators to choose the best cloud hosting provider for that specific task. Instead of doing adjustments based on the cloud provider you have the capability to choose the best among the various options available.</p><h3 id=\"2-competitive-pricing\">2. Competitive Pricing</h3><p>The availability of different cloud providers helps in creating a competitive market and avoid monopoly that offers optimal pricing for different resources. Keeping this in mind, organizations can now enjoy the freedom of comparing different providers and procuring the best available rates based on their specific IT requirements.</p><h3 id=\"3-robust-security\">3. Robust Security</h3><p>Since cloud providers are themselves responsible for the security of their infrastructure, they can ensure that your organization has all the necessary capabilities for protecting your data as well. However, the security of your network must be assessed on a regular basis due to the regular change in your software.</p><h3 id=\"4-agility\">4. Agility</h3><p>Planning a multi-cloud strategy is not an easy task. Many traditional companies still struggle with legacy IT systems, on-premise structures, and hardware suppliers which makes the migration troublesome. They are often dependent on different service providers to deliver the necessary expertise for adopting multi-cloud infrastructures as there is not much skill in the inhouse team.</p><h3 id=\"benefits-of-hybrid-cloud\">Benefits of Hybrid Cloud</h3><h3 id=\"1-scalability\">1. Scalability</h3><p>A hybrid cloud environment can provide the opportunity for businesses to scale out to a cloud environment for specific workloads. Implementing automation rules on the cloud provides the ability to scale resources up and down as business demands change.</p><h3 id=\"2-increased-speed-to-market\">2. Increased Speed To Market</h3><p>In many organizations, speed to market is very important for the business. In a digital age, the ability to quickly spin up environments to test, prototype and launch new products is highly desirable. For organizations with an IT infrastructure that is working near or close to capacity, spinning up a new environment can become a challenge and potentially hinder the business.</p><h3 id=\"3-improved-connectivity\">3. Improved Connectivity</h3><p>When moving components of your business to the cloud there can be problems deriving from network performance that impact critical applications. This can be difficult to prevent, especially during peak traffic periods and is a result of irregular public internet performance.</p><h3 id=\"4-control\">4. Control</h3><p>One of the key benefits of implementing a hybrid cloud solution is control. Rather than outsourcing all aspects of IT infrastructure to a third-party cloud provider, companies can customize the private end of their hybrid cloud model based on their needs and adjust them accordingly as they see fit.</p><p>While the terminology is complicated, both models offer organizations the precision to provide business services in an efficient and effective way. So, while planning for cloud adoption for any workload, or while migrating to a new cloud, you must consider various pros and cons associated with the traditional approaches as well as the new practices.</p><h3 id=\"conclusion\">Conclusion</h3><p>Hybrid cloud and multi-cloud may have similar attributes, but at the operational level, there are several differences.</p><ul><li>Hybrid clouds require <strong><strong>more focus on the native operational tools</strong></strong> while multi-cloud requires focus and investment on third-party tools.</li><li>In multi-cloud, the <strong><strong>responsibility is shared</strong></strong> among the cloud provider and the organization.</li><li>In the hybrid cloud, you have <strong><strong>more responsibility and control</strong></strong> over the data and its security.</li></ul>",
			"comment_id":"5f01d0f2f2297217cef17ff2",
			"feature_image":"http://143.244.136.65:2368/content/images/2021/09/Hybrid-Cloud-v_s-Multi-Cloud.png",
			"featured":false,
			"visibility":"public",
			"email_recipient_filter":"none",
			"created_at":"2020-07-05T18:39:06.000+05:30",
			"updated_at":"2021-09-11T17:52:45.000+05:30",
			"published_at":"2020-07-06T12:27:43.000+05:30",
			"custom_excerpt":null,
			"codeinjection_head":null,
			"codeinjection_foot":null,
			"custom_template":null,
			"canonical_url":null,
			"url":"http://143.244.136.65:2368/hybrid-cloud-v-s-multi-cloud-difference-and-benefits/",
			"excerpt":"There is much confusion about the constituents of the hybrid cloud and a\nmulti-cloud. Generally, they are used interchangeably. Let’s understand in\ndetail the difference between the two.\n\nWhat is Hybrid Cloud?\nIn simple terms, the combination of on-premise infrastructure (Private Cloud)\nwith Public Cloud is called Hybrid Cloud. Another name for Hybrid Cloud is\nHybrid IT.\n\nWhat is Multi-Cloud?\nMulti-cloud is a form of hybrid cloud, but it’s a specialized term used for\nmultiple different public cl",
			"reading_time":5,
			"access":true,
			"send_email_when_published":false,
			"og_image":null,
			"og_title":null,
			"og_description":null,
			"twitter_image":null,
			"twitter_title":null,
			"twitter_description":null,
			"meta_title":null,
			"meta_description":null,
			"email_subject":null,
			"frontmatter":null
		},
		{
			"id":"613c9d70a3e4b056473cd198",
			"uuid":"58b1c229-771f-4c18-9d3d-83c67f1af8a2",
			"title":"DevSecOps Beginners Guide: How to Secure your DevOps Pipelines?",
			"slug":"devsecops-beginners-guide-how-to-secure-your-devops-pipelines",
			"html":"<p>The transit to DevOps Security requires everyone’s involvement right from the top management to the developers, testers and the operations team. It starts from the moment you write the very first line of code and continues even after deployment to production, with the aim to make malicious attacks difficult, exquisitely impossible.</p><p>DevOps Security i.e. DevSecOps focuses on initiating a culture of security in the DevOps environment. It is a collaboration of the DevOps teams with system security personnel, where the end goal is to find a faster and more robust way to deliver the code safely in agile architecture.</p><h3 id=\"integrating-security-into-ci-cd-pipelines\">Integrating security into CI/CD pipelines</h3><p>Security means thousands of things and while trying to accommodate it in DevOps pipeline one can easily deviate and get overwhelmed! There should be a thorough understanding of the workflows and tools the team is using to put effective security checks and controls on pipelines.</p><p>Typically we can decouple our continuous integration, delivery and deployment pipelines into 6 main stages:</p><p><strong><strong>Dev</strong></strong>: Development phase, before the source code lands into the repository.</p><p><strong><strong>Build</strong></strong>: Building and performing basic automated testing of the system.</p><p><strong><strong>Test</strong></strong>: After a successful build, the artifacts are deployed into staging and test environments.</p><p><strong><strong>Host</strong></strong>: This stage involves the configuration or updates need to be applied to the infrastructure.</p><p><strong><strong>Run</strong></strong>: If all green, one can deploy the application into the production environment.</p><p><strong><strong>Observe</strong></strong>: Continuously measuring and monitoring production activity.</p><p>Now, one by one we will be discussing the ways in which we can infuse security in each of the six activities listed above. Let’s dig in.</p><h3 id=\"stage-1-dev\">Stage 1: Dev</h3><p>DevOps practices put emphasis on writing clean and understandable code. The aim of DevSecOps is to boost these practices by adding checks for writing clean &amp; secure code.</p><p>Practices like static code analysis and code reviews can be extended to integrate security from the very beginning, without impacting the productivity of developers. Common security issues can be fixed before any code commit.</p><p><strong><strong>Code reviews</strong></strong>: Code review is very beneficiary as it can enhance security. It increases transparency among development teams which minimize the risks of internal threats and help in improving the code quality.</p><h3 id=\"stage-2-build\">Stage 2: Build</h3><p>After the source code is committed to the repository, the build and basic automated testing of the application is done. Critical security issues can be detected by adding security checks at this stage. The build should fail and send alert notifications if any serious problem is found.</p><ul><li><strong><strong>SAST</strong></strong>: SAST analyzes an application source code to determine if security vulnerabilities exist. It looks at the application ‘from the inside-out’, without needing to actually compile the code. Hidden bugs, that might be hard to find through other kinds of testing can be found easily this way.</li><li><strong><strong>Unit tests</strong></strong>: UTs are important in catching regressions. Adding unit security tests to functions is something worth investing in.</li></ul><h3 id=\"stage-3-test\">Stage 3: Test</h3><p>Soon after a successful build, the test stage is triggered by picking the generated artifacts and is deployed at the staging and testing environments. SAST, DAST, integration, and performance tests are executed in this stage.</p><p>This stage takes more time and resources to execute, therefore adopting the fail fast approach can be beneficiary! The more expensive and time-consuming tests are put on hold until the other tests are already passed.</p><ul><li><strong><strong>Targeted dynamic scanning</strong></strong>: Dynamic Application Security Testing (DAST) comes into play after deployment to find if the application is exposed to attacks such as cross-site scripting or SQL injection.</li><li><strong><strong>Fuzz testing</strong></strong>: Fuzzing is a Black Box, brute-force reliability testing technique, which basically consists of finding implementation bugs using data injection in an automated fashion.</li></ul><h3 id=\"stage-4-host\">Stage 4: Host</h3><p>Many tools over the years of development help in making infrastructure more resilient. Securing the runtime environment is as important as securing the application running on top of it.</p><ul><li><strong><strong>Least Privilege</strong></strong>: The <code>PoLP</code> states that every module must be able to access only the information and resources that are necessary for its legitimate purpose.</li><li><strong><strong>Configuration Automation</strong></strong>: Configuration management tools make it easy to provide secure infrastructure repeatedly.</li></ul><h3 id=\"stage-5-run\">Stage 5: Run</h3><p>After the successful implementation of the first four stages, we’re now ready to go to production. The goal here is to gain the assurity, designing the system resistant to attacks by avoiding any loopholes during configuration that can make the system less reliable and resilient.</p><h3 id=\"stage-6-observe\">Stage 6: Observe</h3><p>Even after the systems are in production, security doesn’t end. There should be automated security checks and continuous monitoring feedback loops are essential for production operations.</p><p>We can gain insights into the traffic an application is receiving and helps spot the pattern of malicious users through continuous monitoring.</p><ul><li><strong><strong>Security Monitoring</strong></strong>: It starts by automating the process of collecting and analyzing indicators of potential security threats, define which types of behavior should trigger alerts, and take serious action on alerts.</li></ul><h3 id=\"final-words\">Final words</h3><p>Organizations wanting to remain relevant and competitive in the industry must consider DevOps security as their primary goal in 2019. You can use these as pointers to start your journey towards <strong><strong>DevSecOps</strong></strong>.</p>",
			"comment_id":"5f01a508f2297217cef17fe5",
			"feature_image":"http://143.244.136.65:2368/content/images/2021/09/devsecops-beginners-guide-1.png",
			"featured":false,
			"visibility":"public",
			"email_recipient_filter":"none",
			"created_at":"2020-07-05T15:31:44.000+05:30",
			"updated_at":"2021-09-11T17:53:50.000+05:30",
			"published_at":"2020-07-05T15:38:23.000+05:30",
			"custom_excerpt":null,
			"codeinjection_head":null,
			"codeinjection_foot":null,
			"custom_template":null,
			"canonical_url":null,
			"url":"http://143.244.136.65:2368/devsecops-beginners-guide-how-to-secure-your-devops-pipelines/",
			"excerpt":"The transit to DevOps Security requires everyone’s involvement right from the\ntop management to the developers, testers and the operations team. It starts\nfrom the moment you write the very first line of code and continues even after\ndeployment to production, with the aim to make malicious attacks difficult,\nexquisitely impossible.\n\nDevOps Security i.e. DevSecOps focuses on initiating a culture of security in\nthe DevOps environment. It is a collaboration of the DevOps teams with system\nsecurity ",
			"reading_time":3,
			"access":true,
			"send_email_when_published":false,
			"og_image":null,
			"og_title":null,
			"og_description":null,
			"twitter_image":null,
			"twitter_title":null,
			"twitter_description":null,
			"meta_title":null,
			"meta_description":null,
			"email_subject":null,
			"frontmatter":null
		},
		{
			"id":"613c9d70a3e4b056473cd197",
			"uuid":"1f90e1a1-ba17-4a6c-bbab-5c242d400a15",
			"title":"All you Need to Know about Testing in Production",
			"slug":"all-you-need-to-know-about-testing-in-production",
			"html":"<p>Testing in production means to do testing in the live environment which is available for the outside world. Carrying out testing operations in the production environment is important as well as very critical. Testers come to know about the critical issues or bugs which might be faced by the real world. It helps them to get assured about the way applications works and check if it is working according to their expectations or not.</p><p>As per the SDLC standards, testers have a separate QA environment for testing and they are not allowed to carry out testing in production. Only sanity and smoke tests are advisable to be carried out in the production environment.</p><p>These are many reasons why testing is important in the production environment. While you should also perform software testing at earlier stages of development, production testing is an important safeguard for early detection of issues that could cause significant problems for production code. While testing at earlier stages of development is very important, testing in production is necessary for early detection of issues that can create a problem for production code.</p><figure class=\"kg-card kg-image-card\"><img src=\"http://143.244.136.65:2368/content/images/2020/07/env-768x264-2.png\" class=\"kg-image\" alt loading=\"lazy\"></figure><h3 id=\"what-s-the-point-of-testing-in-the-production-environment\"><br>What’s the point of testing in the production environment</h3><p>Keeping in mind the risks associated with testing in production, there are several benefits which need to be considered. One of the most important benefits of testing in production is that it gives you the chance to see how your application works in the live environment.</p><p>In the case of complex services testing in the production is very necessary. It is very difficult to mimic the production environment and ensure that the service will perform as expected. You should keep in mind that staging and production environment are very different from each other. It is said that the organizations who don’t have a budget to mimic the recreate the production environment consider to adopt testing in production.</p><p>Testing in production gives testers the confidence about the application because they can test and see their application in the live environment.</p><h3 id=\"how-to-perform-testing-in-a-production-environment\">How to perform testing in a production environment?</h3><p>Testing in production should be adopted in the daily testing routine. One of the ways is to create a checklist that includes all the features of the application. More than one QAs can be assigned for the smaller chunks of the application. It can help in maintaining the quality of the application.</p><p><strong><strong>Guidelines to Perform Testing in Production Environment</strong></strong></p><p>Below are some testing guidelines that must be kept in mind while testing in a production environment:</p><ol><li>Data set used should be unique.</li><li>Load test should never be performed in the production environment.</li><li>Tests should only be performed when there is less load on the application.</li></ol><h3 id=\"risks-involved\">Risks involved</h3><p>Keeping in mind what can be the result of the failure of this approach i.e. bad user experience, security issues or system crashes could all lead to a loss in profit or tarnish a brand.</p><p>Here is the list of some of the risks involved:</p><ol><li>Potential vulnerabilities can be exposed to the public</li><li>Bad user experience</li><li>Loss of brand reputation and revenue</li><li>Keeping the application live and running</li><li>No backup plan for your application runs the risk of loss of data</li><li>Exposing potential vulnerabilities</li><li>Unable to recover from unexpected chaos</li></ol><p>The best way to approach the risks involved is to follow the right approached and by thinking about the outcomes.</p><h3 id=\"advantages-of-testing-in-production-environment\">Advantages of Testing in Production Environment</h3><p>The ultimate aim of testing in a production environment is to ensure that the application is working as expected and is stable in the production environment. You will find many bugs that are not found in other testing environment activities. The identified bugs from production will help the development team to improve application quality, thereby providing a better customer experience.</p><p>It will start to encourage and empower developers to test more early on, and in production. The goal is to elevate quality by building various quality guards around the application.</p><p>Advantages of testing in the production:</p><ol><li>Monitor the application’s performance in real-time scenarios.</li><li>Monitor the API responses at the time of peak traffic.</li><li>Detect bugs and vulnerabilities which typically goes unnoticed while testing in QA environment.</li><li>Helps in maintaining the quality of the application for better user experience.</li><li>Testing with production data gives you the real picture.</li><li>Eliminates the risk of frequent deployments on the production environment.</li></ol><h3 id=\"conclusion\">Conclusion</h3><p>Testing in production should be part of a well-designed, scalable and highly resilient testing routine. You should continue testing early and often, and consider shift-right testing as part of your testing strategy.</p>",
			"comment_id":"5f019ff6f2297217cef17fc8",
			"feature_image":"http://143.244.136.65:2368/content/images/2021/09/Testing-in-Production.png",
			"featured":true,
			"visibility":"public",
			"email_recipient_filter":"none",
			"created_at":"2020-07-05T15:10:06.000+05:30",
			"updated_at":"2021-09-11T17:54:09.000+05:30",
			"published_at":"2020-07-05T15:20:09.000+05:30",
			"custom_excerpt":null,
			"codeinjection_head":null,
			"codeinjection_foot":null,
			"custom_template":null,
			"canonical_url":null,
			"url":"http://143.244.136.65:2368/all-you-need-to-know-about-testing-in-production/",
			"excerpt":"Testing in production means to do testing in the live environment which is\navailable for the outside world. Carrying out testing operations in the\nproduction environment is important as well as very critical. Testers come to\nknow about the critical issues or bugs which might be faced by the real world.\nIt helps them to get assured about the way applications works and check if it is\nworking according to their expectations or not.\n\nAs per the SDLC standards, testers have a separate QA environment ",
			"reading_time":3,
			"access":true,
			"send_email_when_published":false,
			"og_image":null,
			"og_title":null,
			"og_description":null,
			"twitter_image":null,
			"twitter_title":null,
			"twitter_description":null,
			"meta_title":null,
			"meta_description":null,
			"email_subject":null,
			"frontmatter":null
		},
		{
			"id":"613c9d70a3e4b056473cd192",
			"uuid":"4ad0dc6c-0e24-4baa-8110-fb738c313031",
			"title":"How to Scale your DevOps Success",
			"slug":"how-to-scale-your-devops-success",
			"html":"<p>After your team has a few successful apps under its belt, and executives have taken notice. Now they want you to implement a DevOps transformation across the enterprise. How do you build upon the techniques and philosophies you’ve honed so the whole organization benefits?</p><p>Here are some tips from DevOps practitioners that can help ensure a successful kick-start.</p><h3 id=\"1-be-ready-for-aversion\">1. Be ready for aversion</h3><p>Attempting to replicate the successes of one or two teams on a large scale will face some challenges. Executives may be encouraged by the pioneers, but they should be aware of the resistance that will be shown by the more conservative teams.</p><p>The corollary is that you are almost guaranteed to encounter cultural conflicts and competing priorities. Being diplomatic rather than dictatorial in your approach here will better set you up for success. Sometimes you need to make decisions, but you should try to keep those to a minimum. Instead, push those decisions back to the people doing the work.</p><h3 id=\"2-create-a-pool\">2. Create a pool</h3><p>When faced with this type of outsider situation try to find champions in the areas he needs to change who can help sell the benefits to their respective teams. These people need to start getting involved in the work. They need to get training. Many will go out and actively learn with just a little guidance. These folks need to be people that others will listen to and whom they respect.</p><h3 id=\"3-show-the-benefits\">3. Show the benefits</h3><p>Simply telling colleagues you’re going to initiate some changes that will make them more efficient and productive won’t be convincing. People will be resistant until they can clearly see the benefits of following the new approach. Showing them what has been achieved in your own projects and why you would never want to return to the old way of doing things will persuade them. Talk about how they can save time, ship iterations faster and find bugs quickly.</p><h3 id=\"4-don-t-expect-definite-outcomes\">4. Don’t expect definite outcomes</h3><p>A common stumbling block when scaling DevOps success is treating the outcomes of the initial pilot projects as the outcomes for other projects as well. No two apps are alike, and there needs to be some modification in the processes.</p><h3 id=\"5-ask-for-help\">5. Ask for help</h3><p>It’s better to seek help rather than wasting time stuck in the middle of something. Bringing in DevOps consultants, trainers, and tooling experts can all be helpful too but it’s important to create a balance to ensure employees don’t become overwhelmed or discouraged.</p>",
			"comment_id":"5f00380cf2297217cef17f80",
			"feature_image":"http://143.244.136.65:2368/content/images/2020/07/Scale-DevOps-Success.png",
			"featured":false,
			"visibility":"public",
			"email_recipient_filter":"none",
			"created_at":"2020-07-04T13:34:28.000+05:30",
			"updated_at":"2020-07-10T11:43:58.000+05:30",
			"published_at":"2020-07-04T22:34:08.000+05:30",
			"custom_excerpt":null,
			"codeinjection_head":null,
			"codeinjection_foot":null,
			"custom_template":null,
			"canonical_url":null,
			"url":"http://143.244.136.65:2368/how-to-scale-your-devops-success/",
			"excerpt":"After your team has a few successful apps under its belt, and executives have\ntaken notice. Now they want you to implement a DevOps transformation across the\nenterprise. How do you build upon the techniques and philosophies you’ve honed\nso the whole organization benefits?\n\nHere are some tips from DevOps practitioners that can help ensure a successful\nkick-start.\n\n1. Be ready for aversion\nAttempting to replicate the successes of one or two teams on a large scale will\nface some challenges. Executi",
			"reading_time":2,
			"access":true,
			"send_email_when_published":false,
			"og_image":null,
			"og_title":null,
			"og_description":null,
			"twitter_image":null,
			"twitter_title":null,
			"twitter_description":null,
			"meta_title":null,
			"meta_description":null,
			"email_subject":null,
			"frontmatter":null
		},
		{
			"id":"613c9d70a3e4b056473cd190",
			"uuid":"3d3e9b7e-dcaa-4cee-a14c-31719afa6c93",
			"title":"The Ultimate Guide to Measure DevOps Success Metrics",
			"slug":"the-ultimate-guide-to-measure-devops-success-metrics",
			"html":"<p>Imagine you have successfully implemented DevOps in your organization and now after six months, you are ready to reap the results. How can you measure DevOps success and see how far its implementation has brought the desired results?</p><p>First of all, let’s understand why measuring DevOps success is necessary.</p><h3 id=\"importance-of-measuring-the-devops-success\">Importance of Measuring the DevOps Success</h3><p>In today’s era of end-to-end DevOps, you need to measure the key performance indicators (KPIs) to demonstrate success and drive further transformation. DevOps is a journey that requires continuous rectification. But if you are not measuring the results regularly then it will be very difficult to expand DevOps implementation in the complete organization. Measuring DevOps success is important because it targets the processes that determine how IT works. Every organization must ensure that DevOps initiatives deliver the desired results. Decisions based on data results in increased quality and efficiency.</p><p>Metrics are essential to the organization’s DevOps journey. But how do you measure DevOps success? What marks a high-performing organization? Which KPIs can tell you what’s working and what’s not? What do you measure, how do you measure it, and what do the numbers really say?</p><h3 id=\"types-of-devops-metrics\">Types of DevOps metrics</h3><p>Let’s begin with the metrics to keep into account when measuring DevOps success.</p><h3 id=\"deployment-size\">Deployment size</h3><p>Instead of deploying a very major change at once it is advisable to do deployments in smaller chunks so that it gets easy to find bugs and do testing. Considering so many developers working on a single project and each one’s changes is going to have an impact on the system and can conflict with the changes made by another developer. In this case, it gets really very difficult to figure out which part is responsible for breaking the system. That’s why it is advisable to do smaller changes so that everything can be kept under control.</p><h3 id=\"deployment-frequency\">Deployment frequency</h3><p>Tracking the deployment frequency i.e. how often you do deployments is one of the key metrics to take into account. Also, frequent deployments help in seeking client’s feedback on a regular basis and help in keeping both the parties on the same page and ensure the developers that they are delivering the necessary features. Both the production and non-production deployments should be counted separately and deployments should be done earlier on the QA so there is ample time left for testing.</p><h3 id=\"speed-of-deployment\">Speed of Deployment</h3><p>No one wants to run the pipeline and wait for hours until it’s deployed. It’s quite obvious that if we are working towards automation then we need quick results and that’s why deployment time or speed of deployment is important metrics. If a developer asks to deploy the new release and according to him it should take only 30 mins but if the system administrator needs to deploy 4 releases on the same day, then it is going to take 2 business hours. But this complete process can be automated with tools like <a href=\"https://vegastack.com/?utm_source=vegastack-blog&amp;utm_medium=blog-website\">VegaStack</a>, <a href=\"https://www.ansible.com/\">Ansible</a>, <a href=\"https://jenkins.io/\">Jenkins</a> etc. without any manual intervention. You can automate each and every deployment to save time and increase productivity.</p><h3 id=\"automated-tests-pass-percentage\">Automated Tests Pass Percentage</h3><p>The main idea of DevOps is to release versions frequently and automate the release process. Teams should make extensive use of the unit and functional testing. Manual testing takes a lot of time that is why it is advisable to implement automated testing. Autotests follow the checklist which includes 50-100 tests and the percentage of success of these steps shows the stability of the program. It is important to run testing automation after every deployment, which ensures everything is working fine.</p><h3 id=\"error-rates\">Error Rates</h3><p>After the successful deployment of an application, it is very important for the server to respond correctly. Teams can continuously monitor the errors using tools like <a href=\"https://prometheus.io/\">Prometheus</a>.</p><h3 id=\"failed-deployments\">Failed deployments</h3><p>It might happen that after deployment you don’t get the desired result and you need to rollback to the previous deployment which everyone wants to ignore. Tracing mean time to failure (MTTF) is the best option to get a clear picture of the scenario.</p><h3 id=\"code-scanning-detection-rate\">Code scanning detection rate</h3><p>This rate should gradually decrease with time or with movement from one stage to the next in the pipeline. Improvement in security scan rate boosts the confidence that the release of new features is contributing to the stability of the product.</p><p>Let’s examine how to use continuous delivery improvement and tools to assess your DevOps program on three key metrics: team efficiency, business agility, and security.</p><h3 id=\"tools-for-measuring-team-efficiency\">Tools for measuring team efficiency</h3><p>Measuring team efficiency—in terms of how the DevOps initiative has impacted your organization and resulted in the productivity of your team. The key metrics that enable the DevOps team to work more effectively on culture and organization are all about agile software development, such as knowledge sharing, prioritizing tasks, resource utilization, issue tracking, cross-functional teams, and collaboration. The following tools can help you improve and measure team efficiency:</p><ul><li><a href=\"http://kanboard.net/\" rel=\"noopener noreferrer\">Kanboard</a> gives you the visual effect of your tasks in progress and is a very handy tool for managing teams.</li><li><a href=\"https://www.bugzilla.org/\" rel=\"noopener noreferrer\">Bugzilla</a> is a very popular tool with issue-tracking capabilities.</li></ul><h3 id=\"tool-for-measuring-business-agility\">Tool for measuring Business Agility</h3><p>Speed is the main component for accelerating business agility. Because DevOps enables organizations to deliver software faster with fewer failures, it’s getting accepted quickly. DevOps practitioners deploy code updates 46x more frequently and high performers experience change lead times of under an hour, or 440x faster than average. Following are some tools to help you measure business agility:</p><ul><li><a href=\"https://github.com/ansible\" rel=\"noopener noreferrer\">Ansible</a> is a popular automation engine used to automate apps and IT infrastructure and run tasks including installing and configuring applications.</li><li><a href=\"https://jenkins.io/\" rel=\"noopener noreferrer\">Jenkins</a> is an automation tool used to automate the software development process with continuous integration. It facilitates the technical aspects of continuous delivery.</li><li><a href=\"https://kubernetes.io/\" rel=\"noopener noreferrer\">Kubernetes</a> is a container-orchestration system for automating deployment, scaling, and management of containerized applications.</li></ul><h3 id=\"tools-for-measuring-security\">Tools for measuring security</h3><p>Security is always the last phase of measuring your DevOps success. Enterprises that have implemented a DevOps model are generally more successful in releasing code at a much faster rate. But this has increased the need for integrating security in the DevOps process. The faster you release code, the faster you release any vulnerabilities/bugs in it.</p><p>Detecting security vulnerabilities earlier ensures that builds are stable before they pass to the next stage in the release pipeline. In addition, measuring security can help overcome resistance to DevOps adoption among organizations. You need tools that can enable your dev and ops teams to identify bugs as they are using the software. Also,  teams must ensure they don’t introduce bugs when introducing any changes. <a href=\"https://www.sonarqube.org/\" rel=\"noopener noreferrer\">SonarQube</a> is a platform for continuous inspection of code quality. It performs automatic reviews with static analysis of code to detect bugs, code smells, and security vulnerabilities.</p><h3 id=\"conclusion\">Conclusion</h3><p>DevOps is a journey, which doesn’t show the results overnight. Its implementation requires a commitment and is not a one-man show. Both the dev and ops teams need to collaborate and bring this cultural change within the organization. We are sure that our list of DevOps metrics and tools will give you a clarity for measuring DevOps success.</p><h3 id=\"if-you-want-to-experience-the-power-of-all-these-mentioned-tools-using-a-single-product-checkout-vegastack-\">If you want to experience the power of all these mentioned tools using a single product, checkout <a href=\"https://pwslab.com/?utm_source=vegastack-blog&amp;utm_medium=blog-website\">VegaStack</a>.</h3>",
			"comment_id":"5eff8207f2297217cef17f57",
			"feature_image":"http://143.244.136.65:2368/content/images/2020/07/Measure-DevOps-success.png",
			"featured":true,
			"visibility":"public",
			"email_recipient_filter":"none",
			"created_at":"2020-07-04T00:37:51.000+05:30",
			"updated_at":"2021-03-05T00:54:40.000+05:30",
			"published_at":"2020-07-04T01:07:54.000+05:30",
			"custom_excerpt":null,
			"codeinjection_head":null,
			"codeinjection_foot":null,
			"custom_template":null,
			"canonical_url":null,
			"url":"http://143.244.136.65:2368/the-ultimate-guide-to-measure-devops-success-metrics/",
			"excerpt":"Imagine you have successfully implemented DevOps in your organization and now\nafter six months, you are ready to reap the results. How can you measure DevOps\nsuccess and see how far its implementation has brought the desired results?\n\nFirst of all, let’s understand why measuring DevOps success is necessary.\n\nImportance of Measuring the DevOps Success\nIn today’s era of end-to-end DevOps, you need to measure the key performance\nindicators (KPIs) to demonstrate success and drive further transformat",
			"reading_time":5,
			"access":true,
			"send_email_when_published":false,
			"og_image":null,
			"og_title":null,
			"og_description":null,
			"twitter_image":null,
			"twitter_title":null,
			"twitter_description":null,
			"meta_title":null,
			"meta_description":null,
			"email_subject":null,
			"frontmatter":null
		},
		{
			"id":"613c9d70a3e4b056473cd18f",
			"uuid":"6a993222-b543-434a-b48d-84c8b24397da",
			"title":"All you Need to Know about Serverless Architecture",
			"slug":"all-you-need-to-know-about-serverless-architecture",
			"html":"<p>Before discussing the benefits and impact of serverless architecture on developers and operations team, we must know what exactly serverless mean. It’s still a new concept and is unclear to many people. With the introduction of AWS Lambda in 2014, it started gaining momentum and growing exponentially since then.</p><h3 id=\"what-is-serverless\">What is serverless?</h3><p>Serverless is a cloud systems architecture that depends on third-party services also know as (BaaS) – Backend as a service or they run on temporary container also known as (FaaS) – Function as a Service. They don’t involve any servers, virtual machines, or containers to provision or manage. They still exist behind the running application but developer or operators of the application doesn’t realize their presence. You need not go with the literal meaning of the term serverless. It simply means that you need not have virtual machines or servers to run your back-end code.</p><p>Using serverless developers need not worry about the servers as they will give their respective function to the service provider who will run their function on demand or on an event basis. In this way, the developers have no need to handle load balancing as the requests/functions will be served on-demand basis. In the case of parallel requests, there will be a function running for each particular application. This way serverless computing makes scalability of the server to infinity.</p><p>The consumer of the cloud is charged according to the execution time of the function, per millisecond. If the client is up, and the functions are in use, the consumer will be charged; if there are no clients, and the functions are not in use, there are no events, the consumer will not be charged. It will ultimately help in saving money.</p><p>Now let’s understand with some characteristics give by AWS to easily classify which application is serverless and which is not. We will be discussing these 4 characteristics in detail.</p><figure class=\"kg-card kg-image-card\"><img src=\"http://143.244.136.65:2368/content/images/2020/07/serverless-architecture.png\" class=\"kg-image\" alt loading=\"lazy\"></figure><h3 id=\"characteristics-to-distinguish-between-serverless-and-not-serverless\">Characteristics to distinguish between serverless and not serverless</h3><h3 id=\"no-servers-to-manage-or-provision\">No servers to manage or provision</h3><p>When you don’t manage physical servers, virtual machines, or containers. They may exist but they’re managed by the cloud providers.</p><h3 id=\"priced-by-consumption\">Priced by consumption</h3><p>It is heard quite often in the serverless community that “You never pay for idle time”. You only pay for the time until your function is running and when it is in the idle state you will not be charged. Using AWS Lambda you only pay for the amount of time your function ran rather than an EC2 machine for which you have to pay even when your system is idle.</p><h3 id=\"scales-with-usage\">Scales with usage</h3><p>Serverless applications have built-in auto-scaling. As requests come in, service or application scales to meet the demand. With auto-scaling, however, you’re responsible for figuring out how to integrate the new service instance with the existing running instances. Some services are easier to integrate than others. Serverless takes care of that work for you.</p><h3 id=\"availability-and-fault-tolerance-built-in\">Availability and fault tolerance built in</h3><p>Using serverless architecture you’re not responsible for ensuring the availability and fault tolerance of the serverless offerings. Your cloud provider will keep an eye on that. That means you’re not running multiple instances of a service to account for the possibility of failure.</p><p>Now that you have thoroughly understood what serverless is, let’s understand why adopting Serverless is worth giving a chance?</p><h3 id=\"why-serverless-computing\">Why serverless computing?</h3><h3 id=\"it-saves-time-and-overhead-costs\">It Saves Time and Overhead Costs</h3><p>Many large companies are already leveraging the benefits of serverless computing to help trigger code in response to a series of pre-defined events. Serverless computing is based on ‘pay as you use’ model ṭhat’s what makes it more interesting. You will be charged for the time your function is running and the number of times it is triggered. In this way, you can save a lot of money as compared to the general cloud infra which charges you even when the system is idle.</p><h3 id=\"it-is-also-function-as-a-service-faas-\">It is also Function as a Service (FaaS)</h3><p>The day when Amazon launched it’s AWS Lambda serverless computing platform in 2014 it gave a new meaning to Function as a Service. You can run code on any type of backend service without even managing any servers. And you pay for only the time for which you are using the service. Developers need to just upload the code and the rest all will be done by Lambda. Using Lambda it is possible to automatically trigger any service.</p><h3 id=\"nanoservices\">Nanoservices</h3><p>Using serverless you can work will a lot of architectures and nano-services is one among them. Each API endpoints points to the function file that implements one CRUD functionality. It works in perfectly with microservices, another architecture of serverless computing, and enables auto-scaling and load balancing. You no longer have to manually configure clusters and load balancers.</p><h3 id=\"event-based-compute-experience\">Event-based Compute Experience</h3><p>Companies always worry about their infrastructure costs and servers when their Functions call rate become very high. Serverless providers like Microsoft Azure and AWS Lambda are a great solution for these kinds of situations as they aim to provide an event-based serverless compute experience to aid in faster app development.</p><p>As it is event-driven, developers no longer have to rely on the ops to test their code. They can quickly run, test and deploy their code without getting lost in the traditional workflow.</p><h3 id=\"scaling\">Scaling</h3><p>Serverless computing automatically scales your application and with each individual trigger, your code will run parallel to it, thereby reducing your workload and saving time in the process. You will be charged for every 100ms your code executes and for the number of times the code is triggered. This is a good thing because you no longer pay for an idle computer. When the system is not in a running state, you don’t have to pay anything.</p><h3 id=\"no-worries-about-the-machinery\">No worries about the machinery</h3><p>Infrastructure as a Service assures developers that they can stop worrying about how many machines are needed at any given point of time, especially during peak hours, whether the machines are optimized enough and are the security measures tight enough. Developers can ignore hardware, concentrate on their development work which can dramatically reduce costs.</p><h3 id=\"capacity-decisions\">Capacity Decisions</h3><p>A huge portion of servers remains idle. Infrastructure providers make the capacity decisions and allot just the required capacity based on the needs of the enterprises, thereby saving the environment in the longer run.</p><h3 id=\"to-wrap-up\">To Wrap Up</h3><p>The simplicity and cost-saving feature of serverless computing are what makes it famous and worth considering among developers. The vendor looks after all of this, especially the scaling part, without compromising on the performance of the app. The vendor takes care of the scaling part so that the performance of the app doesn’t get compromised.</p><p>Apart from AWS Lambda and Microsoft Azure, there are some prominent serverless frameworks like Google Cloud Functions, IBM OpenWhisk, and Iron.io that have already made waves in serverless computing. Over the years, you can expect this trend to be at the forefront of the cloud ecosystem.</p><h3 id=\"to-wrap-up-1\">To Wrap Up</h3><p>The simplicity and cost-saving feature of serverless computing are what makes it famous and worth considering among developers. The vendor looks after all of this, especially the scaling part, without compromising on the performance of the app. The vendor takes care of the scaling part so that the performance of the app doesn’t get compromised.</p><p>Apart from AWS Lambda and Microsoft Azure, there are some prominent serverless frameworks like Google Cloud Functions, IBM OpenWhisk, and Iron.io that have already made waves in serverless computing. Over the years, you can expect this trend to be at the forefront of the cloud ecosystem.</p><h3 id=\"to-wrap-up-2\">To Wrap Up</h3><p>The simplicity and cost-saving feature of serverless computing are what makes it famous and worth considering among developers. The vendor looks after all of this, especially the scaling part, without compromising on the performance of the app. The vendor takes care of the scaling part so that the performance of the app doesn’t get compromised.</p><p>Apart from AWS Lambda and Microsoft Azure, there are some prominent serverless frameworks like Google Cloud Functions, IBM OpenWhisk, and Iron.io that have already made waves in serverless computing. Over the years, you can expect this trend to be at the forefront of the cloud ecosystem.</p><h3 id=\"to-wrap-up-3\">To Wrap Up</h3><p>The simplicity and cost-saving feature of serverless computing are what makes it famous and worth considering among developers. The vendor looks after all of this, especially the scaling part, without compromising on the performance of the app. The vendor takes care of the scaling part so that the performance of the app doesn’t get compromised.</p><p>Apart from AWS Lambda and Microsoft Azure, there are some prominent serverless frameworks like Google Cloud Functions, IBM OpenWhisk, and Iron.io that have already made waves in serverless computing. Over the years, you can expect this trend to be at the forefront of the cloud ecosystem.</p><h3 id=\"to-wrap-up-4\">To Wrap Up</h3><p>The simplicity and cost-saving feature of serverless computing are what makes it famous and worth considering among developers. The vendor looks after all of this, especially the scaling part, without compromising on the performance of the app. The vendor takes care of the scaling part so that the performance of the app doesn’t get compromised.</p><p>Apart from AWS Lambda and Microsoft Azure, there are some prominent serverless frameworks like Google Cloud Functions, IBM OpenWhisk, and Iron.io that have already made waves in serverless computing. Over the years, you can expect this trend to be at the forefront of the cloud ecosystem.</p><h3 id=\"to-wrap-up-5\">To Wrap Up</h3><p>The simplicity and cost-saving feature of serverless computing are what makes it famous and worth considering among developers. The vendor looks after all of this, especially the scaling part, without compromising on the performance of the app. The vendor takes care of the scaling part so that the performance of the app doesn’t get compromised.</p><p>Apart from AWS Lambda and Microsoft Azure, there are some prominent serverless frameworks like Google Cloud Functions, IBM OpenWhisk, and Iron.io that have already made waves in serverless computing. Over the years, you can expect this trend to be at the forefront of the cloud ecosystem.</p><h3 id=\"to-wrap-up-6\">To Wrap Up</h3><p>The simplicity and cost-saving feature of serverless computing are what makes it famous and worth considering among developers. The vendor looks after all of this, especially the scaling part, without compromising on the performance of the app. The vendor takes care of the scaling part so that the performance of the app doesn’t get compromised.</p><p>Apart from AWS Lambda and Microsoft Azure, there are some prominent serverless frameworks like Google Cloud Functions, IBM OpenWhisk, and Iron.io that have already made waves in serverless computing. Over the years, you can expect this trend to be at the forefront of the cloud ecosystem.</p><h3 id=\"to-wrap-up-7\">To Wrap Up</h3><p>The simplicity and cost-saving feature of serverless computing are what makes it famous and worth considering among developers. The vendor looks after all of this, especially the scaling part, without compromising on the performance of the app. The vendor takes care of the scaling part so that the performance of the app doesn’t get compromised.</p><p>Apart from AWS Lambda and Microsoft Azure, there are some prominent serverless frameworks like Google Cloud Functions, IBM OpenWhisk, and Iron.io that have already made waves in serverless computing. Over the years, you can expect this trend to be at the forefront of the cloud ecosystem.</p><h3 id=\"to-wrap-up-8\">To Wrap Up</h3><p>The simplicity and cost-saving feature of serverless computing are what makes it famous and worth considering among developers. The vendor looks after all of this, especially the scaling part, without compromising on the performance of the app. The vendor takes care of the scaling part so that the performance of the app doesn’t get compromised.</p><p>Apart from AWS Lambda and Microsoft Azure, there are some prominent serverless frameworks like Google Cloud Functions, IBM OpenWhisk, and Iron.io that have already made waves in serverless computing. Over the years, you can expect this trend to be at the forefront of the cloud ecosystem.</p><h3 id=\"to-wrap-up-9\">To Wrap Up</h3><p>The simplicity and cost-saving feature of serverless computing are what makes it famous and worth considering among developers. The vendor looks after all of this, especially the scaling part, without compromising on the performance of the app. The vendor takes care of the scaling part so that the performance of the app doesn’t get compromised.</p><p>Apart from AWS Lambda and Microsoft Azure, there are some prominent serverless frameworks like Google Cloud Functions, IBM OpenWhisk, and Iron.io that have already made waves in serverless computing. Over the years, you can expect this trend to be at the forefront of the cloud ecosystem.</p><h3 id=\"to-wrap-up-10\">To Wrap Up</h3><p>The simplicity and cost-saving feature of serverless computing are what makes it famous and worth considering among developers. The vendor looks after all of this, especially the scaling part, without compromising on the performance of the app. The vendor takes care of the scaling part so that the performance of the app doesn’t get compromised.</p><p>Apart from AWS Lambda and Microsoft Azure, there are some prominent serverless frameworks like Google Cloud Functions, IBM OpenWhisk, and Iron.io that have already made waves in serverless computing. Over the years, you can expect this trend to be at the forefront of the cloud ecosystem.</p>",
			"comment_id":"5eff7e4cf2297217cef17f32",
			"feature_image":"http://143.244.136.65:2368/content/images/2020/07/Everything-about-Serverless-Architecture.png",
			"featured":true,
			"visibility":"public",
			"email_recipient_filter":"none",
			"created_at":"2020-07-04T00:21:56.000+05:30",
			"updated_at":"2021-09-11T18:01:53.000+05:30",
			"published_at":"2020-07-04T00:28:58.000+05:30",
			"custom_excerpt":null,
			"codeinjection_head":null,
			"codeinjection_foot":null,
			"custom_template":null,
			"canonical_url":null,
			"url":"http://143.244.136.65:2368/all-you-need-to-know-about-serverless-architecture/",
			"excerpt":"Before discussing the benefits and impact of serverless architecture on\ndevelopers and operations team, we must know what exactly serverless mean. It’s\nstill a new concept and is unclear to many people. With the introduction of AWS\nLambda in 2014, it started gaining momentum and growing exponentially since\nthen.\n\nWhat is serverless?\nServerless is a cloud systems architecture that depends on third-party services\nalso know as (BaaS) – Backend as a service or they run on temporary container\nalso kn",
			"reading_time":9,
			"access":true,
			"send_email_when_published":false,
			"og_image":null,
			"og_title":null,
			"og_description":null,
			"twitter_image":null,
			"twitter_title":null,
			"twitter_description":null,
			"meta_title":null,
			"meta_description":null,
			"email_subject":null,
			"frontmatter":null
		},
		{
			"id":"613c9d70a3e4b056473cd18e",
			"uuid":"6afce404-72c1-47ef-8d09-8c765bca7a85",
			"title":"Top 5 benefits of Deployment Automation",
			"slug":"5-benefits-of-deployment-automation",
			"html":"<p>The software can be deployed either manually or automatically. Manual deployment requires a team involvement at each and every stage of the software delivery process. Automatic deployment uses technology that enables to automatically release products to various environments.</p><p>Solutions that automate your deployment processes improve the productivity of both the Dev and Ops teams. It enables them and the business to develop faster, accomplish more, and ultimately build better software. Software that can function more reliably for the end-user. Considering continuous deployment as an extension to continuous integration, it can minimize the lead time.</p><h3 id=\"why-aren-t-teams-adopting-it\">Why aren’t teams adopting it?</h3><p>Software deployment automation is considered to be “no-barrier” then why aren’t more teams adopting this? Development teams hesitate or don’t show much interest because they feel that the overhead of creating, setting-up, configuring and maintaining an automated deployment mechanism to not be worth the potential short-term benefits.</p><p>Below are some of the misconceptions that people have regarding automatic deployments:</p>",
			"comment_id":"5efdd7d85d9a3636c562b5a8",
			"feature_image":"http://143.244.136.65:2368/content/images/2020/07/5-Benefits-of-Deployment-Automation.png",
			"featured":true,
			"visibility":"public",
			"email_recipient_filter":"none",
			"created_at":"2020-07-02T18:19:28.000+05:30",
			"updated_at":"2021-09-11T17:59:53.000+05:30",
			"published_at":"2020-07-04T00:13:55.000+05:30",
			"custom_excerpt":null,
			"codeinjection_head":null,
			"codeinjection_foot":null,
			"custom_template":null,
			"canonical_url":null,
			"url":"http://143.244.136.65:2368/5-benefits-of-deployment-automation/",
			"excerpt":"The software can be deployed either manually or automatically. Manual deployment\nrequires a team involvement at each and every stage of the software delivery\nprocess. Automatic deployment uses technology that enables to automatically\nrelease products to various environments.\n\nSolutions that automate your deployment processes improve the productivity of\nboth the Dev and Ops teams. It enables them and the business to develop faster,\naccomplish more, and ultimately build better software. Software t",
			"reading_time":1,
			"access":true,
			"send_email_when_published":false,
			"og_image":null,
			"og_title":null,
			"og_description":null,
			"twitter_image":null,
			"twitter_title":null,
			"twitter_description":null,
			"meta_title":null,
			"meta_description":null,
			"email_subject":null,
			"frontmatter":null
		}
	],
	"meta":{
		"pagination":{
			"page":1,
			"limit":15,
			"pages":1,
			"total":14,
			"next":null,
			"prev":null
		}
	}
}